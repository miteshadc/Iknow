import { Conversation, ConversationConfig } from "./Conversation";
import { JovoRequest, JovoResponse } from "./Interfaces";
export interface RequestBuilder<T extends JovoRequest = JovoRequest> {
    type: string;
    launch(json?: any): Promise<T>;
    intent(json?: any): Promise<T>;
    intent(name: string, slots: any): Promise<T>;
    audioPlayerRequest(json?: any): Promise<T>;
    end(json?: any): Promise<T>;
    rawRequest(json: any): Promise<T>;
    rawRequestByKey(key: string): Promise<T>;
}
export interface ResponseBuilder<T extends JovoResponse = JovoResponse> {
    create(json: any): T;
}
/**
 * Defines a class with static functions for testing purpose.
 */
export declare class TestSuite<T extends RequestBuilder = RequestBuilder, K extends ResponseBuilder = ResponseBuilder> {
    requestBuilder: T;
    responseBuilder: K;
    constructor(requestBuilder: T, responseBuilder: K);
    conversation(config?: ConversationConfig): Conversation;
}
