#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const program = require("commander");
const global_1 = require("../lib/core/global");
const virtual_device_1 = require("../lib/external/virtual-device");
program.version(global_1.Global.version());
if (process.argv.slice(2).length === 0) {
    program.outputHelp();
}
global_1.Global.initializeCLI().then(() => {
    program
        .usage("[options] <utterance>")
        .option("-t, --token <token>", `The token for interacting with your virtual Alexa device - get it here:

        \thttps://${global_1.Global.SpokesDashboardHost}/skills/${global_1.Global.config().sourceID()}/validation
        \t(Bespoken Dashboard account required for use of this feature)\n`)
        .option("-l, --locale <locale>", "The locale to use for the virtual device (en-US, en-GB, de-DE, etc.)")
        .option("-v, --voiceID <voiceID>", "The AWS Polly voice ID to use for generating speech")
        .description("Speaks to your virtual Alexa device")
        .action(function () {
        return __awaiter(this, void 0, void 0, function* () {
            let utterance = "";
            for (let i = 0; i < program.args.length; i++) {
                let arg = program.args[i];
                if (typeof arg !== "string") {
                    break;
                }
                if (utterance.length > 0) {
                    utterance += " ";
                }
                utterance += arg;
            }
            const options = program;
            const token = options.token;
            const locale = options.locale;
            const voiceID = options.voiceID;
            let virtualDeviceResponse;
            try {
                virtualDeviceResponse = yield virtual_device_1.VirtualDeviceClient.speak(utterance, token, locale, voiceID);
            }
            catch (error) {
                if (error.message === "Token Required") {
                    console.log("You need a token for this option to work, get it here:");
                    console.log();
                    console.log("\thttps://" + global_1.Global.SpokesDashboardHost + "/skills/" + global_1.Global.config().sourceID() + "/validation");
                    console.log("\t(Bespoken Dashboard account required for use of this feature)");
                    console.log();
                    console.log("Then try again with:");
                    console.log();
                    console.log("\tbst speak --token <ProvidedToken> <Speech to try>");
                    console.log();
                    process.exit(0);
                    return;
                }
                throw error;
            }
            if (token) {
                console.log("Your token is saved, you can now use this command without providing a token");
            }
            console.log(virtual_device_1.VirtualDeviceClient.renderResult(virtualDeviceResponse));
        });
    });
    program.parse(process.argv);
});
//# sourceMappingURL=bst-speak.js.map