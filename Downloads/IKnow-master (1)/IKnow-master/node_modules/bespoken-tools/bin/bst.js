#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const program = require("commander");
const global_1 = require("../lib/core/global");
const logging_helper_1 = require("../lib/core/logging-helper");
let Logger = "BST";
console.log("BST: v" + global_1.Global.version() + "  Node: " + process.version);
console.log("");
let nodeMajorVersion = parseInt(process.version.substr(1, 2));
if (nodeMajorVersion < 4) {
    logging_helper_1.LoggingHelper.error(Logger, "!!!!Node version must be >= 4!!!!");
    logging_helper_1.LoggingHelper.error(Logger, "Please install to use bst");
    logging_helper_1.LoggingHelper.prepareForFileLoggingAndDisableConsole("bst-debug.log");
    logging_helper_1.LoggingHelper.error(Logger, "!!!!Node version must be >= 4!!!!");
    logging_helper_1.LoggingHelper.error(Logger, "Please install to use bst");
    process.exit(1);
}
program
    .command("proxy <lambda|function|http>", "Proxies a Lambda, Google Cloud Function or HTTP service")
    .command("launch", "Sends a launch request to your service")
    .command("intend <intent> [SlotName=SlotValue...]", "Sends the specified intent to your service")
    .command("utter <utterance>", "Sends an intent with the specified utterance to your service")
    .command("sleep <location>", "Instructs bst to sleep using specified location")
    .command("deploy <lambda>", "Deploys a lambda")
    .command("speak <utterance>", "Sends your message to your virtual alexa device");
global_1.Global.initializeCLI().then(() => program.parse(process.argv)).catch((error) => {
    if (error.code === "ETIMEDOUT") {
        logging_helper_1.LoggingHelper.error(Logger, "Could not establish connection." +
            " Please check your network connection and try again.");
    }
    else {
        logging_helper_1.LoggingHelper.error(Logger, "Something went wrong. Please check your network connection and try again.");
    }
    logging_helper_1.LoggingHelper.error(Logger, "If the issue persists, contact us at Bespoken:");
    logging_helper_1.LoggingHelper.error(Logger, "\thttps://gitter.im/bespoken/bst");
    logging_helper_1.LoggingHelper.prepareForFileLoggingAndDisableConsole("bst-debug.log");
    logging_helper_1.LoggingHelper.error(Logger, "Error using bst version: " + global_1.Global.version() + " on Node: " + process.version);
    logging_helper_1.LoggingHelper.error(Logger, error);
});
//# sourceMappingURL=bst.js.map