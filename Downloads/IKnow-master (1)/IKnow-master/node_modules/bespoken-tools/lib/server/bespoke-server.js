"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_manager_1 = require("./node-manager");
const webhook_manager_1 = require("./webhook-manager");
const http_helper_1 = require("../core/http-helper");
const global_1 = require("../core/global");
const statistics_1 = require("./statistics");
const logging_helper_1 = require("../core/logging-helper");
const Logger = "BSPKD";
class BespokeServer {
    constructor(webhookPort, nodePort) {
        this.webhookPort = webhookPort;
        this.nodePort = nodePort;
    }
    start(started) {
        let self = this;
        console.error("AWS_KEY: " + process.env["AWS_ACCESS_KEY_ID"]);
        let count = 0;
        let callbackCounter = function () {
            count++;
            if (count === 2) {
                if (started !== undefined && started !== null) {
                    started();
                }
            }
        };
        this.nodeManager = new node_manager_1.NodeManager(this.nodePort);
        this.nodeManager.start(callbackCounter);
        this.webhookManager = new webhook_manager_1.WebhookManager(this.webhookPort);
        this.webhookManager.start(callbackCounter);
        this.webhookManager.onWebhookReceived = function (webhookRequest) {
            if (webhookRequest.isPing()) {
                http_helper_1.HTTPHelper.respond(webhookRequest.sourceSocket, 200, "bst-server-" + global_1.Global.version());
            }
            else {
                try {
                    webhookRequest.nodeID();
                }
                catch (error) {
                    http_helper_1.HTTPHelper.respond(webhookRequest.sourceSocket, 400, error.message);
                    statistics_1.Statistics.instance().record(null, statistics_1.AccessType.REQUEST_DROPPED);
                    return;
                }
                if (webhookRequest.nodeID() === null) {
                    logging_helper_1.LoggingHelper.error(Logger, "No node specified: " + webhookRequest.uri);
                    http_helper_1.HTTPHelper.respond(webhookRequest.sourceSocket, 400, "No node specified. Must be included with the querystring as node-id.");
                }
                else {
                    let node = self.nodeManager.node(webhookRequest.nodeID());
                    if (node == null) {
                        logging_helper_1.LoggingHelper.error(Logger, "Node is not active: " + webhookRequest.nodeID());
                        http_helper_1.HTTPHelper.respond(webhookRequest.sourceSocket, 404, "Node is not active: " + webhookRequest.nodeID());
                        statistics_1.Statistics.instance().record(webhookRequest.nodeID(), statistics_1.AccessType.REQUEST_DROPPED);
                    }
                    else {
                        logging_helper_1.LoggingHelper.info(Logger, "Forwarded: " + webhookRequest.nodeID());
                        node.forward(webhookRequest);
                        statistics_1.Statistics.instance().record(node.id, statistics_1.AccessType.REQUEST_FORWARDED);
                    }
                }
            }
        };
        this.uncaughtExceptionHandler = function (error) {
            console.error("UncaughtException: " + error.stack);
        };
        process.on("uncaughtException", this.uncaughtExceptionHandler);
    }
    stop(callback) {
        let count = 0;
        let callbackFunction = function () {
            count++;
            if (count === 2) {
                callback();
            }
        };
        process.removeListener("uncaughtException", this.uncaughtExceptionHandler);
        this.nodeManager.stop(callbackFunction);
        this.webhookManager.stop(callbackFunction);
    }
}
exports.BespokeServer = BespokeServer;
//# sourceMappingURL=bespoke-server.js.map