"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const file_util_1 = require("../core/file-util");
class IntentSchema {
    constructor(schemaJSON) {
        this.schemaJSON = schemaJSON;
    }
    static fromFile(file, callback) {
        file_util_1.FileUtil.readFile(file, function (data) {
            if (data !== null) {
                let json = null;
                try {
                    json = JSON.parse(data.toString());
                    let schema = new IntentSchema(json);
                    callback(schema);
                }
                catch (e) {
                    callback(null, "Bad JSON: " + e.message);
                }
            }
            else {
                let error = "File not found: " + file;
                callback(null, error);
            }
        });
    }
    static fromJSON(schemaJSON) {
        return new IntentSchema(schemaJSON);
    }
    intents() {
        let intentArray = [];
        for (let intentJSON of this.schemaJSON.intents) {
            let intent = new Intent(intentJSON.intent);
            if (intentJSON.slots !== undefined && intentJSON.slots !== null) {
                for (let slotJSON of intentJSON.slots) {
                    intent.addSlot(new IntentSlot(slotJSON.name, slotJSON.type));
                }
            }
            intentArray.push(intent);
        }
        return intentArray;
    }
    intent(intentString) {
        let intent = null;
        for (let o of this.intents()) {
            if (o.name === intentString) {
                intent = o;
                break;
            }
        }
        return intent;
    }
    hasIntent(intentString) {
        return this.intent(intentString) !== null;
    }
}
exports.IntentSchema = IntentSchema;
class Intent {
    constructor(name) {
        this.name = name;
        this.builtin = false;
        this.slots = null;
        if (this.name.indexOf("AMAZON") !== -1) {
            this.builtin = true;
        }
    }
    addSlot(slot) {
        if (this.slots === null) {
            this.slots = [];
        }
        this.slots.push(slot);
    }
}
exports.Intent = Intent;
class IntentSlot {
    constructor(name, type) {
        this.name = name;
        this.type = type;
    }
}
exports.IntentSlot = IntentSlot;
//# sourceMappingURL=intent-schema.js.map