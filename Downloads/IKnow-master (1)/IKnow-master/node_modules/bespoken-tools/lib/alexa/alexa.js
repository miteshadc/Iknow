"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const audio_player_1 = require("./audio-player");
const logging_helper_1 = require("../core/logging-helper");
const service_request_1 = require("./service-request");
const request = require("request");
const alexa_context_1 = require("./alexa-context");
const events_1 = require("events");
const Logger = "ALEXA";
var AlexaEvent;
(function (AlexaEvent) {
    AlexaEvent[AlexaEvent["SessionEnded"] = 0] = "SessionEnded";
    AlexaEvent[AlexaEvent["SkillError"] = 1] = "SkillError";
    AlexaEvent[AlexaEvent["SkillResponse"] = 2] = "SkillResponse";
})(AlexaEvent = exports.AlexaEvent || (exports.AlexaEvent = {}));
class Alexa {
    constructor() {
        this._actionQueue = new ActionQueue();
        this._context = null;
        this._emitter = null;
        this._emitter = new events_1.EventEmitter();
    }
    startSession(skillURL, model, audioEnabled, applicationID) {
        let audioPlayer = null;
        if (audioEnabled) {
            audioPlayer = new audio_player_1.AudioPlayer(this);
        }
        this._context = new alexa_context_1.AlexaContext(skillURL, model, audioPlayer, applicationID);
        this._context.newSession();
        return this;
    }
    context() {
        return this._context;
    }
    interactionModel() {
        return this.context().interactionModel();
    }
    spoken(utterance, callback) {
        let intent = this.interactionModel().sampleUtterances.intentForUtterance(utterance);
        if (intent === null) {
            let defaultUtterance = this.interactionModel().sampleUtterances.defaultUtterance();
            intent = this.interactionModel().sampleUtterances.intentForUtterance(defaultUtterance);
            logging_helper_1.LoggingHelper.warn(Logger, "No intentName matches utterance: " + utterance + ". Using fallback utterance: " + intent.utterance);
        }
        this.callSkillWithIntent(intent.intentName, intent.toJSON(), callback);
    }
    launched(callback) {
        let serviceRequest = new service_request_1.ServiceRequest(this._context);
        serviceRequest.launchRequest();
        this.callSkill(serviceRequest, callback);
    }
    sessionEnded(sessionEndedReason, errorData, callback) {
        if (sessionEndedReason === service_request_1.SessionEndedReason.ERROR) {
            logging_helper_1.LoggingHelper.error(Logger, "SessionEndedRequest:\n" + JSON.stringify(errorData, null, 2));
        }
        let serviceRequest = new service_request_1.ServiceRequest(this._context);
        serviceRequest.sessionEndedRequest(sessionEndedReason, errorData);
        this.callSkill(serviceRequest, callback);
        this.context().endSession();
    }
    intended(intentName, slots, callback) {
        this.callSkillWithIntent(intentName, slots, callback);
    }
    callSkillWithIntent(intentName, slots, callback) {
        let self = this;
        try {
            if (this._context.audioPlayerEnabled() && this._context.audioPlayer().isPlaying()) {
                this._context.audioPlayer().suspend();
            }
            let serviceRequest = new service_request_1.ServiceRequest(this._context).intentRequest(intentName);
            if (slots !== undefined && slots !== null) {
                for (let slotName of Object.keys(slots)) {
                    serviceRequest.withSlot(slotName, slots[slotName]);
                }
            }
            this.callSkill(serviceRequest, function (error, responseJSON, requestJSON) {
                if (callback !== undefined && callback !== null) {
                    callback(error, responseJSON, requestJSON);
                }
                if (self._context.audioPlayerEnabled() && self._context.audioPlayer().suspended()) {
                    self._context.audioPlayer().resume();
                }
            });
        }
        catch (e) {
            if (callback !== undefined && callback !== null) {
                callback(e, null, null);
            }
        }
    }
    callSkill(serviceRequest, callback) {
        let self = this;
        this.sequence(function (done) {
            self.callSkillImpl(serviceRequest, callback, done);
        });
    }
    sequence(action) {
        this._actionQueue.enqueue(action);
    }
    callSkillImpl(serviceRequest, callback, done) {
        let self = this;
        if (serviceRequest.requiresSession() && !this.context().activeSession()) {
            this.context().newSession();
        }
        let requestJSON = serviceRequest.toJSON();
        logging_helper_1.LoggingHelper.debug(Logger, "CALLING: " + requestJSON.request.type);
        let responseHandler = function (error, response, body) {
            if (self.context().activeSession()) {
                self.context().session().used();
                if (!error) {
                    if (body.response !== undefined && body.response.shouldEndSession) {
                        self.context().endSession();
                    }
                    else {
                        self.context().session().updateAttributes(body.sessionAttributes);
                    }
                }
            }
            if (error) {
                if (callback !== undefined && callback !== null) {
                    callback(error, null, null);
                }
            }
            else {
                if (body.response !== undefined && body.response.directives !== undefined) {
                    self._context.audioPlayer().directivesReceived(body.response.directives);
                }
                if (callback !== undefined && callback !== null) {
                    callback(null, body, requestJSON);
                }
                self._emitter.emit(AlexaEvent[AlexaEvent.SkillResponse], body, requestJSON);
            }
            done();
        };
        this.post({
            url: this.context().skillURL(),
            method: "POST",
            json: requestJSON,
        }, responseHandler);
    }
    post(options, responseHandler) {
        request.post(options, responseHandler);
    }
    on(event, callback) {
        this._emitter.on(AlexaEvent[event], callback);
    }
    once(event, callback) {
        this._emitter.once(AlexaEvent[event], callback);
    }
    stop(onStop) {
        this._actionQueue.stop(function () {
            onStop();
        });
    }
}
exports.Alexa = Alexa;
class ActionQueue {
    constructor() {
        this._queue = [];
        this._stop = false;
    }
    enqueue(action) {
        this._queue.push(action);
        if (this._queue.length === 1) {
            this.next();
        }
    }
    processing() {
        return (this._queue.length > 0);
    }
    next() {
        let self = this;
        if (this._queue.length === 0) {
            return;
        }
        let action = this._queue[0];
        action(function () {
            self._queue = self._queue.slice(1);
            if (self._stop) {
                self._stopCallback();
            }
            else {
                self.next();
            }
        });
    }
    stop(onStop) {
        this._stop = true;
        if (this.processing()) {
            this._stopCallback = onStop;
        }
        else {
            onStop();
        }
    }
}
exports.ActionQueue = ActionQueue;
//# sourceMappingURL=alexa.js.map