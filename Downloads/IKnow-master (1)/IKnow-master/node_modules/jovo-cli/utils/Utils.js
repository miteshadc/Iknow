"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chalk = require("chalk");
var fs = require("fs");
var path = require("path");
var logSymbols = require("log-symbols");
var figures = require("figures");
var elegantSpinner = require("elegant-spinner");
/**
 * From Listr utils
 */
// @ts-ignore
var pointer = chalk.yellow(figures.pointer);
function isDefined(x) {
    return x !== null && x !== undefined;
}
exports.isDefined = isDefined;
function getSymbol(task, options) {
    if (!task.spinner) {
        task.spinner = elegantSpinner();
    }
    if (task.isPending()) {
        return options.showSubtasks !== false && task.subtasks.length > 0 ?
            pointer
            :
                // @ts-ignore
                chalk.yellow(task.spinner());
    }
    if (task.isCompleted()) {
        return logSymbols.success;
    }
    if (task.hasFailed()) {
        return task.subtasks.length > 0 ? pointer : logSymbols.error;
    }
    if (task.isSkipped()) {
        return logSymbols.success;
    }
    return ' ';
}
exports.getSymbol = getSymbol;
function deleteFolderRecursive(filepath) {
    if (fs.existsSync(filepath)) {
        fs.readdirSync(filepath).forEach(function (file, index) {
            var curPath = path.join(filepath, file);
            if (fs.lstatSync(curPath).isDirectory()) { // recurse
                exports.deleteFolderRecursive(curPath);
            }
            else { // delete file
                fs.unlinkSync(curPath);
            }
        });
        fs.rmdirSync(filepath);
    }
}
exports.deleteFolderRecursive = deleteFolderRecursive;
/**
 * Adds CLI options for all commands
 *
 * @export
 * @param {Vorpal.Command} vorpalInstance
 */
function addBaseCliOptions(vorpalInstance) {
    vorpalInstance
        .option('--debug', 'Displays additional debugging informatoin');
}
exports.addBaseCliOptions = addBaseCliOptions;
