"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_core_1 = require("jovo-core");
const _set = require("lodash.set");
const _get = require("lodash.get");
const GoogleAction_1 = require("../core/GoogleAction");
const GoogleActionResponse_1 = require("../core/GoogleActionResponse");
const GoogleActionSpeechBuilder_1 = require("../core/GoogleActionSpeechBuilder");
class GoogleAssistantCore {
    install(googleAssistant) {
        googleAssistant.middleware('$init').use(this.init.bind(this));
        googleAssistant.middleware('$type').use(this.type.bind(this));
        googleAssistant.middleware('$output').use(this.output.bind(this));
        googleAssistant.middleware('after.$output').use(this.userStorage.bind(this));
        GoogleAction_1.GoogleAction.prototype.displayText = function (displayText) {
            _set(this.$output, 'GoogleAssistant.displayText', displayText);
            return this;
        };
    }
    async init(handleRequest) {
        const requestObject = handleRequest.host.$request;
        if (requestObject.user &&
            requestObject.conversation &&
            requestObject.surface &&
            requestObject.availableSurfaces) {
            handleRequest.jovo = new GoogleAction_1.GoogleAction(handleRequest.app, handleRequest.host);
        }
    }
    type(googleAction) {
        if (_get(googleAction.$originalRequest || googleAction.$request, 'inputs[0].intent') === 'actions.intent.CANCEL') {
            _set(googleAction.$type, 'type', jovo_core_1.EnumRequestType.END);
        }
    }
    async output(googleAction) {
        const output = googleAction.$output;
        if (!googleAction.$response) {
            googleAction.$response = new GoogleActionResponse_1.GoogleActionResponse();
        }
        const tell = _get(output, 'GoogleAssistant.tell') || _get(output, 'tell');
        if (tell) {
            _set(googleAction.$response, 'expectUserResponse', false);
            _set(googleAction.$response, 'richResponse.items', [{
                    simpleResponse: {
                        ssml: GoogleActionSpeechBuilder_1.GoogleActionSpeechBuilder.toSSML(tell.speech),
                    }
                }]);
        }
        const ask = _get(output, 'GoogleAssistant.ask') || _get(output, 'ask');
        if (ask) {
            _set(googleAction.$response, 'expectUserResponse', true);
            _set(googleAction.$response, 'richResponse.items', [{
                    simpleResponse: {
                        ssml: GoogleActionSpeechBuilder_1.GoogleActionSpeechBuilder.toSSML(ask.speech),
                    }
                }]);
            const noInputPrompts = [];
            if (output.ask && output.ask.reprompt && typeof output.ask.reprompt === 'string') {
                noInputPrompts.push({
                    ssml: GoogleActionSpeechBuilder_1.GoogleActionSpeechBuilder.toSSML(ask.reprompt)
                });
            }
            else if (Array.isArray(ask.reprompt)) {
                ask.reprompt.forEach((reprompt) => {
                    noInputPrompts.push({
                        ssml: GoogleActionSpeechBuilder_1.GoogleActionSpeechBuilder.toSSML(reprompt)
                    });
                });
            }
            _set(googleAction.$response, 'noInputPrompts', noInputPrompts);
        }
        if (_get(output, 'GoogleAssistant.displayText') && googleAction.hasScreenInterface()) {
            _set(googleAction.$response, 'richResponse.items[0].simpleResponse.displayText', _get(output, 'GoogleAssistant.displayText'));
        }
    }
    async userStorage(googleAction) {
        const output = googleAction.$output;
        if (!googleAction.$response) {
            googleAction.$response = new GoogleActionResponse_1.GoogleActionResponse();
        }
        _set(googleAction.$response, 'userStorage', JSON.stringify(googleAction.$user.$storage));
    }
    uninstall(googleAssistant) {
    }
}
exports.GoogleAssistantCore = GoogleAssistantCore;
//# sourceMappingURL=GoogleAssistantCore.js.map