"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_core_1 = require("jovo-core");
const _set = require("lodash.set");
const _get = require("lodash.get");
const GoogleAction_1 = require("../core/GoogleAction");
const GoogleActionResponse_1 = require("../core/GoogleActionResponse");
class Transaction {
    constructor(googleAction) {
        this.googleAction = googleAction;
    }
    checkRequirements(paymentOptions) {
        _set(this.googleAction.$output, 'GoogleAssistant.Transactions.RequirementsCheck', {
            paymentOptions
        });
    }
}
exports.Transaction = Transaction;
class TransactionsPlugin {
    install(googleAssistant) {
        googleAssistant.middleware('$type').use(this.type.bind(this));
        googleAssistant.middleware('$output').use(this.output.bind(this));
        GoogleAction_1.GoogleAction.prototype.$transaction = undefined;
    }
    type(googleAction) {
        if (_get(googleAction.$originalRequest || googleAction.$request, 'inputs[0].intent') === 'actions.intent.MEDIA_STATUS') {
            _set(googleAction.$type, 'type', jovo_core_1.EnumRequestType.AUDIOPLAYER);
            for (const argument of _get(googleAction.$originalRequest || googleAction.$request, 'inputs[0]["arguments"]', [])) {
                if (argument.name === 'MEDIA_STATUS') {
                    let status = argument.extension.status.toLowerCase();
                    status = status.charAt(0).toUpperCase() + status.slice(1);
                    _set(googleAction.$type, 'subType', `GoogleAction.${status}`);
                }
            }
        }
        googleAction.$transactions = new Transactions(googleAction);
    }
    output(googleAction) {
        if (!googleAction.hasMediaResponseInterface()) {
            return;
        }
        if (!googleAction.$response) {
            googleAction.$response = new GoogleActionResponse_1.GoogleActionResponse();
        }
        const output = googleAction.$output;
        if (_get(output, 'GoogleAssistant.MediaResponse')) {
            const richResponseItems = _get(googleAction.$response, 'richResponse.items', []);
            richResponseItems.push({
                mediaResponse: {
                    mediaType: 'AUDIO',
                    mediaObjects: [_get(output, 'GoogleAssistant.MediaResponse')]
                }
            });
            _set(googleAction.$response, 'richResponse.items', richResponseItems);
        }
    }
    uninstall(googleAssistant) {
    }
}
exports.TransactionsPlugin = TransactionsPlugin;
//# sourceMappingURL=Transactions.js.map