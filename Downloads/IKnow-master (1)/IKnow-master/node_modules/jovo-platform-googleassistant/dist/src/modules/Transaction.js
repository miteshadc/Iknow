"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _set = require("lodash.set");
const _get = require("lodash.get");
const GoogleAction_1 = require("../core/GoogleAction");
const GoogleActionResponse_1 = require("../core/GoogleActionResponse");
class Transaction {
    constructor(googleAction) {
        this.googleAction = googleAction;
    }
    checkRequirements(orderOptions, paymentOptions) {
        this.googleAction.$output.GoogleAssistant = {
            TransactionRequirementsCheck: {
                orderOptions,
                paymentOptions
            }
        };
        return this;
    }
    getRequirementsCheckResult() {
        for (const argument of _get(this.googleAction.$originalRequest || this.googleAction.$request, 'inputs[0]["arguments"]', [])) {
            if (argument.name === 'TRANSACTION_REQUIREMENTS_CHECK_RESULT') {
                return _get(argument, 'extension.resultType');
            }
        }
    }
    isRequirementsCheckOk() {
        return this.getRequirementsCheckResult() === 'OK';
    }
    isRequirementsCheckUserActionRequired() {
        return this.getRequirementsCheckResult() === 'USER_ACTION_REQUIRED';
    }
    isRequirementsCheckAssistantSurfaceNotSupported() {
        return this.getRequirementsCheckResult() === 'ASSISTANT_SURFACE_NOT_SUPPORTED';
    }
    isRequirementsCheckRegionNotSupported() {
        return this.getRequirementsCheckResult() === 'REGION_NOT_SUPPORTED';
    }
    askForDeliveryAddress(reason = '') {
        this.googleAction.$output.GoogleAssistant = {
            AskForDeliveryAddress: {
                reason,
            }
        };
        return this;
    }
    getDeliveryAddressDecision() {
        for (const argument of _get(this.googleAction.$originalRequest || this.googleAction.$request, 'inputs[0]["arguments"]', [])) {
            if (argument.name === 'DELIVERY_ADDRESS_VALUE') {
                return _get(argument, 'extension.userDecision');
            }
        }
    }
    isDeliveryAddressAccepted() {
        return this.getDeliveryAddressDecision() === 'ACCEPTED';
    }
    isDeliveryAddressRejected() {
        return this.getDeliveryAddressDecision() === 'REJECTED';
    }
    getDeliveryAddress() {
        for (const argument of _get(this.googleAction.$originalRequest || this.googleAction.$request, 'inputs[0]["arguments"]', [])) {
            if (argument.name === 'TRANSACTION_REQUIREMENTS_CHECK_RESULT') {
                return _get(argument, 'extension.resultType');
            }
        }
    }
    getDeliveryAddressLocation() {
        if (!this.isDeliveryAddressAccepted()) {
            return;
        }
        for (const argument of _get(this.googleAction.$originalRequest || this.googleAction.$request, 'inputs[0]["arguments"]', [])) {
            if (argument.name === 'DELIVERY_ADDRESS_VALUE') {
                return _get(argument, 'extension.location');
            }
        }
    }
    transactionDecision(orderOptions, paymentOptions, proposedOrder) {
        this.googleAction.$output.GoogleAssistant = {
            TransactionDecision: {
                orderOptions,
                paymentOptions,
                proposedOrder,
            }
        };
        return this;
    }
    createOrder(speech, orderUpdate) {
        this.googleAction.$output.GoogleAssistant = {
            OrderUpdate: {
                orderUpdate,
                speech,
            },
        };
    }
    getTransactionDecisionResult() {
        for (const argument of _get(this.googleAction.$originalRequest || this.googleAction.$request, 'inputs[0]["arguments"]', [])) {
            if (argument.name === 'TRANSACTION_DECISION_VALUE') {
                return _get(argument, 'extension.userDecision');
            }
        }
    }
    isOrderAccepted() {
        return this.getTransactionDecisionResult() === "ORDER_ACCEPTED";
    }
    isOrderRejected() {
        return this.getTransactionDecisionResult() === "ORDER_REJECTED";
    }
    isDeliveryAddressUpdated() {
        return this.getTransactionDecisionResult() === "DELIVERY_ADDRESS_UPDATED";
    }
    isCartChangeRequested() {
        return this.getTransactionDecisionResult() === "CART_CHANGE_REQUESTED";
    }
}
exports.Transaction = Transaction;
class TransactionsPlugin {
    install(googleAssistant) {
        googleAssistant.middleware('$type').use(this.type.bind(this));
        googleAssistant.middleware('$output').use(this.output.bind(this));
        GoogleAction_1.GoogleAction.prototype.$transaction = undefined;
    }
    type(googleAction) {
        if (_get(googleAction.$originalRequest || googleAction.$request, 'inputs[0].intent') === 'actions.intent.TRANSACTION_REQUIREMENTS_CHECK') {
            _set(googleAction.$type, 'type', 'ON_TRANSACTION');
            _set(googleAction.$type, 'subType', 'TRANSACTION_REQUIREMENTS_CHECK');
        }
        if (_get(googleAction.$originalRequest || googleAction.$request, 'inputs[0].intent') === 'actions.intent.DELIVERY_ADDRESS') {
            _set(googleAction.$type, 'type', 'ON_TRANSACTION');
            _set(googleAction.$type, 'subType', 'DELIVERY_ADDRESS');
        }
        if (_get(googleAction.$originalRequest || googleAction.$request, 'inputs[0].intent') === 'actions.intent.TRANSACTION_DECISION') {
            _set(googleAction.$type, 'type', 'ON_TRANSACTION');
            _set(googleAction.$type, 'subType', 'TRANSACTION_DECISION');
        }
        googleAction.$transaction = new Transaction(googleAction);
    }
    output(googleAction) {
        if (!googleAction.$response) {
            googleAction.$response = new GoogleActionResponse_1.GoogleActionResponse();
        }
        const output = googleAction.$output;
        if (_get(output, 'GoogleAssistant.TransactionRequirementsCheck')) {
            _set(googleAction.$response, 'expectUserResponse', true);
            _set(googleAction.$response, 'systemIntent', {
                intent: 'actions.intent.TRANSACTION_REQUIREMENTS_CHECK',
                data: {
                    '@type': "type.googleapis.com/google.actions.v2.TransactionRequirementsCheckSpec",
                    paymentOptions: _get(output, 'GoogleAssistant.TransactionRequirementsCheck.paymentOptions')
                }
            });
        }
        if (_get(output, 'GoogleAssistant.AskForDeliveryAddress')) {
            _set(googleAction.$response, 'expectUserResponse', true);
            _set(googleAction.$response, 'systemIntent', {
                intent: 'actions.intent.DELIVERY_ADDRESS',
                data: {
                    '@type': "type.googleapis.com/google.actions.v2.DeliveryAddressValueSpec",
                    addressOptions: {
                        reason: _get(output, 'GoogleAssistant.AskForDeliveryAddress.reason')
                    }
                }
            });
        }
        if (_get(output, 'GoogleAssistant.TransactionDecision')) {
            _set(googleAction.$response, 'expectUserResponse', true);
            _set(googleAction.$response, 'systemIntent', {
                intent: 'actions.intent.TRANSACTION_DECISION',
                data: {
                    '@type': "type.googleapis.com/google.actions.v2.TransactionDecisionValueSpec",
                    orderOptions: {
                        requestDeliveryAddress: true,
                    },
                    paymentOptions: _get(output, 'GoogleAssistant.TransactionDecision.paymentOptions'),
                    proposedOrder: _get(output, 'GoogleAssistant.TransactionDecision.proposedOrder')
                }
            });
        }
        if (_get(output, 'GoogleAssistant.OrderUpdate')) {
            _set(googleAction.$response, 'expectUserResponse', true);
            const richResponseItems = _get(googleAction.$response, 'richResponse.items', []);
            richResponseItems.push({
                structuredResponse: {
                    orderUpdate: _get(output, 'GoogleAssistant.OrderUpdate.orderUpdate'),
                }
            });
            richResponseItems.push({
                simpleResponse: {
                    textToSpeech: _get(output, 'GoogleAssistant.OrderUpdate.speech'),
                }
            });
            _set(googleAction.$response, 'richResponse.items', richResponseItems);
        }
    }
    uninstall(googleAssistant) {
    }
}
exports.TransactionsPlugin = TransactionsPlugin;
//# sourceMappingURL=Transaction.js.map