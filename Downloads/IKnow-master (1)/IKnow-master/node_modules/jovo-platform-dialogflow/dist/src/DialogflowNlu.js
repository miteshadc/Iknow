"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _get = require("lodash.get");
const _set = require("lodash.set");
const _merge = require("lodash.merge");
const _mapValues = require("lodash.mapvalues");
const jovo_core_1 = require("jovo-core");
const DialogflowRequest_1 = require("./core/DialogflowRequest");
const jovo_core_2 = require("jovo-core");
const DialogflowResponse_1 = require("./core/DialogflowResponse");
const DialogflowRequestBuilder_1 = require("./core/DialogflowRequestBuilder");
const DialogflowResponseBuilder_1 = require("./core/DialogflowResponseBuilder");
class Dialogflow {
    constructor(jovo) {
        this.jovo = jovo;
        this.$request = DialogflowRequest_1.DialogflowRequest.fromJSON(jovo.$host.getRequestObject());
        this.platform = this.$request.originalDetectIntentRequest.source;
        this.$response = new DialogflowResponse_1.DialogflowResponse();
    }
}
class DialogflowNlu extends jovo_core_1.Extensible {
    constructor(config) {
        super(config);
        this.config = {
            enabled: true,
            sessionContextId: 'session',
            plugin: {},
        };
        this.init = async (handleRequest) => {
            const requestObject = handleRequest.host.getRequestObject();
            if (requestObject.queryResult &&
                requestObject.originalDetectIntentRequest &&
                requestObject.session) {
                handleRequest.jovo = new handleRequest.platformClazz(handleRequest.app, handleRequest.host);
                _set(handleRequest.jovo.$plugins, 'DialogflowNlu.dialogflow', new Dialogflow(handleRequest.jovo));
            }
        };
        this.request = (jovo) => {
            jovo.$originalRequest = _get(jovo.$plugins.DialogflowNlu.dialogflow.$request, 'originalDetectIntentRequest.payload');
            jovo.$request = jovo.$plugins.DialogflowNlu.dialogflow.$request;
            jovo.$request.originalDetectIntentRequest.payload = this.config.platformRequestClazz.fromJSON(jovo.$originalRequest);
        };
        this.type = (jovo) => {
            if (_get(jovo.$request, 'queryResult.intent.displayName') === 'Default Welcome Intent') {
                jovo.$type = {
                    type: jovo_core_2.EnumRequestType.LAUNCH
                };
            }
            else if (!jovo.$type.type) {
                jovo.$type = {
                    type: jovo_core_2.EnumRequestType.INTENT
                };
            }
        };
        this.nlu = (jovo) => {
            const nluData = {};
            if (jovo.$type.type === jovo_core_2.EnumRequestType.INTENT) {
                _set(nluData, 'intent.name', _get(jovo.$plugins.DialogflowNlu.dialogflow.$request, 'queryResult.intent.displayName'));
            }
            jovo.$nlu = nluData;
        };
        this.inputs = (jovo) => {
            const params = _get(jovo.$plugins.DialogflowNlu.dialogflow.$request, 'queryResult.parameters');
            jovo.$inputs = _mapValues(params, (value, name) => {
                return {
                    name,
                    value,
                    key: value,
                    id: value,
                };
            });
        };
        this.session = async (jovo) => {
            const dialogflowRequest = jovo.$plugins.DialogflowNlu.dialogflow.$request;
            const sessionId = _get(dialogflowRequest, 'session');
            if (_get(dialogflowRequest, 'queryResult.outputContexts')) {
                const sessionContext = _get(dialogflowRequest, 'queryResult.outputContexts').find((context) => {
                    return context.name === `${sessionId}/contexts/${this.config.sessionContextId}`;
                });
                if (sessionContext) {
                    jovo.$session.$data = sessionContext.parameters;
                    for (const parameter of Object.keys(_get(dialogflowRequest, 'queryResult.parameters'))) {
                        delete jovo.$session.$data[parameter];
                        delete jovo.$session.$data[parameter + '.original'];
                    }
                }
                jovo.$requestSessionAttributes = JSON.parse(JSON.stringify(jovo.$session.$data));
            }
        };
        this.output = (jovo) => {
            const output = jovo.$output;
            const dialogflowResponse = jovo.$plugins.DialogflowNlu.dialogflow.$response;
            const dialogflowRequest = jovo.$plugins.DialogflowNlu.dialogflow.$request;
            if (_get(output, 'tell')) {
                _set(dialogflowResponse, 'fulfillmentText', `${output.tell.speech}`);
            }
            if (_get(output, 'ask')) {
                _set(dialogflowResponse, 'fulfillmentText', `${output.ask.speech}`);
            }
            const sessionId = _get(dialogflowRequest, 'session');
            const outputContexts = _get(dialogflowRequest, 'queryResult.outputContexts');
            const contextName = `${sessionId}/contexts/${this.config.sessionContextId}`;
            if (outputContexts && Object.keys(jovo.$session.$data).length > 0) {
                const sessionContext = outputContexts.find((context) => {
                    return context.name === contextName;
                });
                if (sessionContext) {
                    outputContexts.forEach((context) => {
                        if (context.name === contextName) {
                            context.parameters = jovo.$session.$data;
                        }
                    });
                }
                else {
                    outputContexts.push({
                        name: contextName,
                        lifespanCount: 1000,
                        parameters: jovo.$session.$data
                    });
                }
            }
            _set(dialogflowResponse, 'outputContexts', _get(dialogflowRequest, 'queryResult.outputContexts'));
        };
        this.response = async (jovo) => {
            jovo.$plugins.DialogflowNlu.dialogflow.$response.payload = {
                [this.config.platformId]: this.config.platformResponseClazz.fromJSON(jovo.$response)
            };
            jovo.$response = jovo.$plugins.DialogflowNlu.dialogflow.$response;
        };
        if (config) {
            this.config = _merge(this.config, config);
        }
        this.init = this.init.bind(this);
        this.request = this.request.bind(this);
        this.type = this.type.bind(this);
        this.nlu = this.nlu.bind(this);
        this.inputs = this.inputs.bind(this);
        this.output = this.output.bind(this);
        this.session = this.session.bind(this);
        this.response = this.response.bind(this);
    }
    install(platform) {
        // @ts-ignore
        platform.requestBuilder = new DialogflowRequestBuilder_1.DialogflowRequestBuilder();
        // @ts-ignore
        platform.requestBuilder.platform = 'google';
        // @ts-ignore
        platform.requestBuilder.platformRequestClazz = this.config.platformRequestClazz;
        // @ts-ignore
        platform.responseBuilder = new DialogflowResponseBuilder_1.DialogflowResponseBuilder();
        // @ts-ignore
        platform.responseBuilder.platform = 'google';
        // @ts-ignore
        platform.responseBuilder.platformResponseClazz = this.config.platformResponseClazz;
        platform.middleware('$init').use(this.init);
        // // Register to Platform middleware
        platform.middleware('$request').use(this.request);
        platform.middleware('$type').use(this.type);
        platform.middleware('$nlu').use(this.nlu);
        platform.middleware('$inputs').use(this.inputs);
        platform.middleware('$output').use(this.output);
        platform.middleware('$session').use(this.session);
        platform.middleware('$response').use(this.response);
        Object.assign(jovo_core_1.Jovo.prototype, {
            dialogflow() {
                return this.$plugins.DialogflowNlu.dialogflow;
            }
        });
    }
    uninstall(platform) {
        platform.middleware('$init').remove(this.init);
        // // Register to Platform middleware
        platform.middleware('$request').remove(this.request);
        platform.middleware('$type').remove(this.type);
        platform.middleware('$nlu').remove(this.nlu);
        platform.middleware('$inputs').remove(this.inputs);
        platform.middleware('$output').remove(this.output);
        platform.middleware('$session').remove(this.session);
        platform.middleware('$response').remove(this.response);
    }
}
exports.DialogflowNlu = DialogflowNlu;
//# sourceMappingURL=DialogflowNlu.js.map