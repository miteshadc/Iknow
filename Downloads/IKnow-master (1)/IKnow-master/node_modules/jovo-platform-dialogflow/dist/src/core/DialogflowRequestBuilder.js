"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _set = require("lodash.set");
const DialogflowRequest_1 = require("./DialogflowRequest");
const path = require("path");
const samples = {
    'google': {
        'DefaultWelcomeIntent': 'DefaultWelcomeIntent.json',
        'HelpIntent': 'HelpIntent.json',
        'MediaFinished': 'MediaFinished.json',
        'Cancel': 'Cancel.json',
        'SignInCancelled': 'SignInCancelled.json',
        'SignInOk': 'SignInOk.json',
        'OnPermissionName': 'OnPermissionName.json',
        'OnPermissionPreciseLocation': 'OnPermissionPreciseLocation.json'
    }
};
class DialogflowRequestBuilder {
    constructor() {
        this.type = 'DialogflowAgent';
    }
    async launch(json) {
        return await this.launchRequest(json);
    }
    async intent(obj, inputs) {
        if (typeof obj === 'string') {
            const req = await this.intentRequest();
            _set(req, `queryResult.intent.displayName`, obj);
            if (inputs) {
                for (const parameter in inputs) {
                    if (inputs.hasOwnProperty(parameter)) {
                        req.setParameter(parameter, inputs[parameter]);
                    }
                }
            }
            return req;
        }
        else {
            return await this.intentRequest(obj);
        }
    }
    async launchRequest(json) {
        if (json) {
            return DialogflowRequest_1.DialogflowRequest.fromJSON(json);
        }
        else {
            // @ts-ignore
            const reqObj = this.platform ? getJsonFilePath('DefaultWelcomeIntent', this.platform) : getJsonFilePath('DefaultWelcomeIntent'); // tslint:disable-line
            const request = JSON.stringify(require(reqObj));
            const dialogflowRequest = DialogflowRequest_1.DialogflowRequest.fromJSON(JSON.parse(request));
            // @ts-ignore
            dialogflowRequest.originalDetectIntentRequest.payload = this.platformRequestClazz.fromJSON(dialogflowRequest.originalDetectIntentRequest.payload);
            return dialogflowRequest;
        }
    }
    async intentRequest(json) {
        if (json) {
            return DialogflowRequest_1.DialogflowRequest.fromJSON(json);
        }
        else {
            // @ts-ignore
            const reqObj = this.platform ? getJsonFilePath('HelpIntent', this.platform) : getJsonFilePath('HelpIntent'); // tslint:disable-line
            const request = JSON.stringify(require(reqObj));
            const dialogflowRequest = DialogflowRequest_1.DialogflowRequest.fromJSON(JSON.parse(request));
            // @ts-ignore
            dialogflowRequest.originalDetectIntentRequest.payload = this.platformRequestClazz.fromJSON(dialogflowRequest.originalDetectIntentRequest.payload);
            return dialogflowRequest;
        }
    }
    async rawRequest(json) {
        return DialogflowRequest_1.DialogflowRequest.fromJSON(json);
    }
    async rawRequestByKey(key) {
        // @ts-ignore
        const reqObj = this.platform ? getJsonFilePath(key, this.platform) : getJsonFilePath(key); // tslint:disable-line
        const request = JSON.stringify(require(reqObj));
        const dialogflowRequest = DialogflowRequest_1.DialogflowRequest.fromJSON(JSON.parse(request));
        // @ts-ignore
        dialogflowRequest.originalDetectIntentRequest.payload = this.platformRequestClazz.fromJSON(dialogflowRequest.originalDetectIntentRequest.payload);
        return dialogflowRequest;
    }
    async audioPlayerRequest(json) {
        if (json) {
            return DialogflowRequest_1.DialogflowRequest.fromJSON(json);
        }
        else {
            // @ts-ignore
            const reqObj = this.platform ? getJsonFilePath('MediaFinished', this.platform) : getJsonFilePath('MediaFinished'); // tslint:disable-line
            const request = JSON.stringify(require(reqObj));
            const dialogflowRequest = DialogflowRequest_1.DialogflowRequest.fromJSON(JSON.parse(request));
            // @ts-ignore
            dialogflowRequest.originalDetectIntentRequest.payload = this.platformRequestClazz.fromJSON(dialogflowRequest.originalDetectIntentRequest.payload);
            return dialogflowRequest;
        }
    }
    async end(json) {
        if (json) {
            return DialogflowRequest_1.DialogflowRequest.fromJSON(json);
        }
        else {
            // @ts-ignore
            const request = JSON.stringify(require(getJsonFilePath('Cancel')));
            return DialogflowRequest_1.DialogflowRequest.fromJSON(JSON.parse(request));
        }
    }
}
exports.DialogflowRequestBuilder = DialogflowRequestBuilder;
function getJsonFilePath(key, platform = 'google') {
    let folder = './../../../';
    if (process.env.NODE_ENV === 'UNIT_TEST') {
        folder = './../../../';
    }
    // @ts-ignore
    const fileName = samples[platform][key];
    if (!fileName) {
        throw new Error(`Can't find file.`);
    }
    return path.join(folder, 'sample-request-json', 'v2', platform, fileName);
}
//# sourceMappingURL=DialogflowRequestBuilder.js.map