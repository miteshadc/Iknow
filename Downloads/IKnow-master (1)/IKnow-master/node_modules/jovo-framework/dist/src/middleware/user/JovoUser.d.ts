import { BaseApp, Output, HandleRequest, Inputs, Plugin, PluginConfig } from "jovo-core";
export interface Config extends PluginConfig {
    columnName?: string;
    implicitSave?: boolean;
    metaData?: MetaDataConfig;
    context?: ContextConfig;
}
export interface MetaDataConfig {
    enabled?: boolean;
    lastUsedAt?: boolean;
    sessionsCount?: boolean;
    createdAt?: boolean;
    requestHistorySize?: number;
    devices?: boolean;
}
export interface ContextConfig {
    enabled?: boolean;
    prev?: {
        size?: number;
        request?: {
            intent?: boolean;
            state?: boolean;
            inputs?: boolean;
            timestamp?: boolean;
        };
        response?: {
            speech?: boolean;
            reprompt?: boolean;
            state?: boolean;
            output?: boolean;
        };
    };
}
export interface UserContext {
    prev?: ContextPrevObject[];
}
export interface ContextPrevObject {
    request?: {
        timestamp?: string;
        state?: string;
        intent?: string;
        inputs?: Inputs;
    };
    response?: {
        speech?: string;
        reprompt?: string | string[];
        state?: string;
        output?: Output;
    };
}
export interface UserMetaData {
    lastUsedAt?: string;
    sessionsCount?: number;
    createdAt?: string;
    requests?: any;
}
export declare class JovoUser implements Plugin {
    config: Config;
    constructor(config?: Config);
    install(app: BaseApp): void;
    loadDb: (handleRequest: HandleRequest, force?: boolean) => Promise<void>;
    saveDb: (handleRequest: HandleRequest, force?: boolean) => Promise<void>;
    private updateMetaData;
    private updateContextData;
    uninstall(app: BaseApp): void;
}
