"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_core_1 = require("jovo-core");
const _merge = require("lodash.merge");
class DefaultSheet {
    constructor(config) {
        this.config = {
            enabled: true,
            name: undefined,
            range: 'A:B',
        };
        if (config) {
            this.config = _merge(this.config, config);
        }
        this.config.entity = this.config.entity || this.config.name;
    }
    install(extensible) {
        this.cms = extensible;
        extensible.middleware('retrieve').use(this.retrieve.bind(this));
    }
    uninstall(cms) {
    }
    async retrieve(handleRequest) {
        if (!this.cms) {
            return Promise.reject('No cms initialized.');
        }
        const spreadsheetId = this.config.spreadsheetId || this.cms.config.spreadsheetId;
        if (!spreadsheetId) {
            return Promise.reject('SpreadsheetId has to be set.');
        }
        if (!this.config.name) {
            return Promise.reject('sheet name has to be set.');
        }
        if (!this.config.range) {
            return Promise.reject('range has to be set.');
        }
        let values = []; // tslint:disable-line
        const access = this.config.access || this.cms.config.access || 'private';
        if (access === 'private') {
            jovo_core_1.Log.verbose('Retrieving private spreadsheet');
            jovo_core_1.Log.verbose('Spreadsheet ID: ' + spreadsheetId);
            jovo_core_1.Log.verbose('Sheet name: ' + this.config.name);
            jovo_core_1.Log.verbose('Sheet range: ' + this.config.range);
            values = await this.cms.loadPrivateSpreadsheetData(spreadsheetId, this.config.name, this.config.range); // tslint:disable-line
        }
        else if (access === 'public') {
            jovo_core_1.Log.verbose('Retrieving public spreadsheet');
            jovo_core_1.Log.verbose('Spreadsheet ID: ' + spreadsheetId);
            jovo_core_1.Log.verbose('Sheet position: ' + this.config.position);
            const publicValues = await this.cms.loadPublicSpreadSheetData(spreadsheetId, this.config.position); // tslint:disable-line
            values = this.parsePublicToPrivate(publicValues);
        }
        if (values) {
            this.parse(handleRequest, values);
        }
    }
    parse(handleRequest, values) {
        if (!this.config.entity) {
            throw new Error('Entity has to be set.');
        }
        handleRequest.app.$cms[this.config.entity] = values;
    }
    /**
     * Parses public spreadsheet json to a private spreadsheet format
     * @param values
     * @returns {any[]}
     */
    parsePublicToPrivate(values) {
        const newValues = []; // tslint:disable-line
        const entries = values.feed.entry;
        const headers = [];
        entries.forEach((entry, index) => {
            const row = [];
            // get headers
            if (index === 0) {
                Object.keys(entry).forEach((key) => {
                    if (key.startsWith('gsx$')) {
                        headers.push(key.substr(4));
                    }
                });
                newValues.push(headers);
            }
            // get values
            Object.keys(entry).forEach((key) => {
                if (key.startsWith('gsx$')) {
                    const cell = entry[key];
                    row.push(cell['$t']);
                }
            });
            newValues.push(row);
        });
        return newValues;
    }
}
exports.DefaultSheet = DefaultSheet;
//# sourceMappingURL=DefaultSheet.js.map