import { Extensible, ExtensibleConfig } from "./Extensible";
import { AppData, Db, Host, Platform } from "./Interfaces";
export interface BaseAppConfig extends ExtensibleConfig {
    inputMap?: {
        [key: string]: string;
    };
}
export declare class BaseApp extends Extensible {
    private initialized;
    config: BaseAppConfig;
    $platform: Map<string, Platform>;
    $db: Db;
    $cms: any;
    $data: AppData;
    constructor(config?: BaseAppConfig);
    /**
     * Initialize setup middleware
     * @param {Function} callback
     */
    setUp(callback: Function): void;
    /**
     * Is called on exit
     * IMPORTANT: Must have synchronous code only
     * @param {Function} callback
     */
    tearDown(callback: Function): void;
    getPlatformByName(name: string): Platform | undefined;
    initWebhook(): void;
    handle(host: Host): Promise<void>;
    onRequest(callback: Function): void;
    onResponse(callback: Function): void;
    onError(callback: Function): void;
    onFail(callback: Function): void;
    install(extensible: Extensible): void;
    uninstall(extensible: Extensible): void;
}
