#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const JovoRenderer_1 = require("../utils/JovoRenderer");
const Listr = require("listr");
const Prompts_1 = require("../utils/Prompts");
const project = require('jovo-cli-core').getProject();
const dimText = require('chalk').white.dim;
const Utils_1 = require("../utils/Utils");
process.on('unhandledRejection', (reason, p) => {
    console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);
});
module.exports = (vorpal) => {
    let DEBUG = false;
    const vorpalInstance = vorpal
        .command('update')
        .description('Updates the Jovo modules in project to latest versions.');
    Utils_1.addBaseCliOptions(vorpalInstance);
    vorpalInstance
        .action(async (args) => {
        try {
            DEBUG = args.options.debug ? true : false;
            const tasks = new Listr([], {
                renderer: JovoRenderer_1.JovoCliRenderer,
                collapse: false,
            });
            await project.init();
            const packageVersions = await Utils_1.getPackageVersionsNpm(/^jovo\-/);
            let text;
            const outOfDatePackages = [];
            if (Object.keys(packageVersions).length) {
                console.log('\nJovo packages of current project:');
                for (const packageName of Object.keys(packageVersions)) {
                    text = `  ${packageName}: ${packageVersions[packageName].local}`;
                    if (packageVersions[packageName].local !== packageVersions[packageName].npm) {
                        text += dimText(` -> ${packageVersions[packageName].npm}`);
                        outOfDatePackages.push(packageName);
                    }
                    console.log(text);
                }
            }
            if (outOfDatePackages.length === 0) {
                console.log('\nAll packages are already up to date!\n');
                return Promise.resolve();
            }
            console.log('\n');
            const updateConfirmation = await Prompts_1.promptUpdateVersions(outOfDatePackages.length).then((answers) => {
                return answers.update;
            });
            if (updateConfirmation !== Prompts_1.ANSWER_UPDATE) {
                return Promise.resolve();
            }
            console.log('\n');
            let npmUpdateOutput = '';
            tasks.add({
                title: `Updating Jovo packages`,
                task: async (ctx, task) => {
                    const updateCommand = 'npm update ' + Object.values(outOfDatePackages).join(' ');
                    npmUpdateOutput = await new Promise((resolve, reject) => {
                        child_process_1.exec(updateCommand, {
                            cwd: project.getProjectPath(),
                        }, (error, stdout) => {
                            if (error) {
                                console.log(error);
                                reject(error);
                                return;
                            }
                            resolve(stdout);
                        });
                    });
                },
            });
            return tasks.run()
                .then(async () => {
                console.log();
                console.log('  Update completed.');
                console.log('\n\n');
                console.log('Update output: ');
                console.log('-------------------');
                if (!npmUpdateOutput) {
                    console.log('Everything is up to date!');
                }
                else {
                    console.log(npmUpdateOutput);
                }
                console.log('\n\n');
                console.log('Changelog: https://raw.githubusercontent.com/jovotech/jovo-framework/master/CHANGELOG.md');
            })
                .catch((err) => {
                if (DEBUG === true) {
                    console.error(err);
                }
                process.exit(1);
            });
        }
        catch (err) {
            console.error('There was a problem:');
            console.error(err);
            process.exit(1);
        }
    });
};
//# sourceMappingURL=update.js.map