"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_core_1 = require("jovo-core");
const _get = require("lodash.get");
const GoogleActionUser_1 = require("./GoogleActionUser");
const GoogleActionSpeechBuilder_1 = require("./GoogleActionSpeechBuilder");
const GoogleActionRequest_1 = require("./GoogleActionRequest");
class GoogleAction extends jovo_core_1.Jovo {
    constructor(app, host) {
        super(app, host);
        this.$user = new GoogleActionUser_1.GoogleActionUser(this);
        this.$googleAction = this;
        this.platformRequest = GoogleActionRequest_1.GoogleActionRequest;
        this.$speech = new GoogleActionSpeechBuilder_1.GoogleActionSpeechBuilder(this);
        this.$reprompt = new GoogleActionSpeechBuilder_1.GoogleActionSpeechBuilder(this);
    }
    getLocale() {
        return this.$request.getLocale();
    }
    getTimestamp() {
        return this.$request.getTimestamp();
    }
    speechBuilder() {
        return this.getSpeechBuilder();
    }
    getSpeechBuilder() {
        return new GoogleActionSpeechBuilder_1.GoogleActionSpeechBuilder(this);
    }
    isNewSession() {
        return this.$request.isNewSession();
    }
    ask(speech, reprompt) {
        delete this.$output.tell;
        if (!reprompt) {
            reprompt = speech;
        }
        this.$output.ask = {
            speech: speech.toString(),
            reprompt: Array.isArray(reprompt) ? reprompt : reprompt.toString(),
        };
        return this;
    }
    hasScreenInterface() {
        if (!_get(this.$originalRequest || this.$request, 'surface.capabilities')) {
            return false;
        }
        return typeof _get(this.$originalRequest || this.$request, 'surface.capabilities')
            .find((item) => item.name === 'actions.capability.SCREEN_OUTPUT') !== 'undefined';
    }
    hasAudioInterface() {
        if (!_get(this.$originalRequest || this.$request, 'surface.capabilities')) {
            return false;
        }
        return typeof _get(this.$originalRequest || this.$request, 'surface.capabilities')
            .find((item) => item.name === 'actions.capability.AUDIO_OUTPUT') !== 'undefined';
    }
    hasMediaResponseInterface() {
        if (!_get(this.$originalRequest || this.$request, 'surface.capabilities')) {
            return false;
        }
        return typeof _get(this.$originalRequest || this.$request, 'surface.capabilities')
            .find((item) => item.name === 'actions.capability.MEDIA_RESPONSE_AUDIO') !== 'undefined';
    }
    hasVideoInterface() {
        return false;
    }
    getDeviceId() {
        return undefined;
    }
    getType() {
        return 'GoogleAction';
    }
    getPlatformType() {
        return 'GoogleAssistant';
    }
    getRawText() {
        return _get(this.$originalRequest || this.$request, 'inputs[0].arguments[0].rawText') ||
            _get(this.$originalRequest || this.$request, 'inputs[0].rawInputs[0].query');
    }
    isInSandbox() {
        return _get(this.$originalRequest || this.$request, 'isInSandbox', false);
    }
    isVoiceMatchedUser() {
    }
}
exports.GoogleAction = GoogleAction;
//# sourceMappingURL=GoogleAction.js.map