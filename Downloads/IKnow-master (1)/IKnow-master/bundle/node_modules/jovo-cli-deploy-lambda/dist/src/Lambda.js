"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const _ = require("lodash");
const path = require("path");
const fs = require("fs");
const child_process_1 = require("child_process");
const proxyAgent = require('proxy-agent');
const jovo_cli_core_1 = require("jovo-cli-core");
class JovoCliDeployLambda extends jovo_cli_core_1.JovoCliDeploy {
    constructor() {
        super();
    }
    execute(ctx, project) {
        const config = project.getConfig(ctx.stage);
        let arn = _.get(config, 'alexaSkill.host.lambda.arn') ||
            _.get(config, 'host.lambda.arn');
        if (!arn) {
            arn = _.get(config, 'alexaSkill.endpoint') ||
                _.get(config, 'endpoint');
            arn = _.startsWith(arn, 'arn') ? arn : undefined;
        }
        return [
            {
                title: 'Uploading to lambda',
                enabled: (ctx) => !ctx.newSkill &&
                    _.isUndefined(arn) === false ||
                    (_.isUndefined(arn) === true && ctx.target === 'lambda'),
                task: async (ctx, task) => {
                    try {
                        if (_.isUndefined(arn)) {
                            const errorMessage = 'Please add a Lambda Endpoint to your project.js file.';
                            return Promise.reject(new Error('Error: ' + errorMessage));
                        }
                        const projectConfig = project.getConfig(ctx.stage);
                        ctx.lambdaArn = arn;
                        if (project.getConfigParameter('src', ctx.stage) && projectConfig.config) {
                            await project.moveTempJovoConfig(project.getConfigParameter('src', ctx.stage));
                        }
                        await this.checkAsk();
                        await this.upload(ctx, project);
                        if (project.getConfigParameter('src', ctx.stage) && projectConfig.config) {
                            await project.deleteTempJovoConfig(project.getConfigParameter('src', ctx.stage));
                        }
                        let info = 'Info: ';
                        info += `Deployed to lambda function: ${arn}`;
                        task.skip(info);
                        return Promise.resolve();
                    }
                    catch (err) {
                        throw err;
                    }
                },
            }
        ];
    }
    async upload(ctx, project) {
        ctx.src = ctx.src.replace(/\\/g, '\\\\');
        let awsProfile = 'default';
        if (ctx.askProfile) {
            awsProfile = this.getAWSCredentialsFromAskProfile(ctx.askProfile);
        }
        if (ctx.awsProfile) {
            awsProfile = ctx.awsProfile;
        }
        AWS.config.credentials = new AWS.SharedIniFileCredentials({ profile: awsProfile });
        const region = ctx.lambdaArn.match(/([a-z]{2})-([a-z]{4})([a-z]*)-\d{1}/g);
        if (!region) {
            return Promise.reject(new Error(`No region found in "${ctx.lambdaArn}"!`));
        }
        AWS.config.region = region[0];
        const proxyServer = process.env.http_proxy ||
            process.env.HTTP_PROXY ||
            process.env.https_proxy ||
            process.env.HTTPS_PROXY;
        if (proxyServer) {
            AWS.config.update({
                httpOptions: {
                    agent: proxyAgent(proxyServer)
                }
            });
        }
        const lambda = new AWS.Lambda(ctx.awsConfig || {});
        const pathToZip = await project.zipSrcFolder(ctx);
        await this.updateFunction(lambda, pathToZip, ctx.lambdaArn, ctx.lambdaConfig || {});
        return this.deleteLambdaZip(pathToZip);
    }
    checkAsk() {
        return new Promise((resolve, reject) => {
            child_process_1.exec('ask -v', (error, stdout) => {
                if (error) {
                    const msg = 'Jovo requires ASK CLI\n' +
                        'Please read more: https://developer.amazon.com/docs/smapi/quick-start-alexa-skills-kit-command-line-interface.html';
                    return reject(new Error(msg));
                }
                const version = stdout.split('.');
                if (parseInt(version[0], 10) >= 1 && parseInt(version[1], 10) >= 1) {
                    return resolve();
                }
                return reject(new Error('Please update ask-cli to version >= 1.1.0'));
            });
        });
    }
    updateFunction(lambda, pathToZip, lambdaArn, lambdaParams) {
        return new Promise((resolve, reject) => {
            const zipdata = fs.readFileSync(pathToZip);
            let params = {
                FunctionName: lambdaArn,
                ZipFile: new Buffer(zipdata),
            };
            params = _.merge(params, lambdaParams);
            lambda.updateFunctionCode(params, (err, data) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    deleteLambdaZip(pathToZip) {
        return new Promise((resolve, reject) => {
            fs.unlink(pathToZip, (err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    getAWSCredentialsFromAskProfile(askProfile) {
        const askCliConfig = path.join(jovo_cli_core_1.Utils.getUserHome(), '.ask', 'cli_config');
        try {
            const data = fs.readFileSync(askCliConfig);
            const askProfiles = JSON.parse(data.toString()).profiles;
            for (const profileKey of Object.keys(askProfiles)) {
                const profile = askProfiles[profileKey];
                if (profileKey === askProfile && _.get(profile, 'aws_profile')) {
                    return _.get(profile, 'aws_profile');
                }
            }
        }
        catch (e) {
            throw e;
        }
    }
}
JovoCliDeployLambda.TARGET_KEY = 'lambda';
JovoCliDeployLambda.PRE_DEPLOY_TASKS = [jovo_cli_core_1.TARGET_ZIP];
exports.JovoCliDeployLambda = JovoCliDeployLambda;
//# sourceMappingURL=Lambda.js.map