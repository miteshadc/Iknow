"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _get = require("lodash.get");
const _set = require("lodash.set");
const jovo_core_1 = require("jovo-core");
const DialogflowRequest_1 = require("./core/DialogflowRequest");
const DialogflowResponse_1 = require("./core/DialogflowResponse");
class DialogflowCore {
    constructor(config) {
        this.config = {
            enabled: true,
            sessionContextId: 'session',
        };
    }
    install(dialogFlow) {
        dialogFlow.middleware('$request').use(this.request.bind(this));
        dialogFlow.middleware('$type').use(this.type.bind(this));
        dialogFlow.middleware('$session').use(this.session.bind(this));
        dialogFlow.middleware('$nlu').use(this.nlu.bind(this));
        dialogFlow.middleware('$inputs').use(this.inputs.bind(this));
        dialogFlow.middleware('$output').use(this.output.bind(this));
    }
    uninstall(app) {
    }
    request(dialogflowAgent) {
        dialogflowAgent.$request = DialogflowRequest_1.DialogflowRequest.fromJSON(dialogflowAgent.$host.$request);
    }
    type(dialogflowAgent) {
        const dialogflowRequest = dialogflowAgent.$request;
        if (_get(dialogflowRequest, 'queryResult.intent')) {
            if (_get(dialogflowRequest, 'queryResult.intent.displayName') === 'Default Welcome Intent') {
                dialogflowAgent.$type = {
                    type: jovo_core_1.EnumRequestType.LAUNCH
                };
            }
            else {
                dialogflowAgent.$type = {
                    type: jovo_core_1.EnumRequestType.INTENT
                };
            }
        }
    }
    nlu(dialogflowAgent) {
        const dialogflowRequest = dialogflowAgent.$request;
        const nluData = {};
        if (dialogflowAgent.$type.type === jovo_core_1.EnumRequestType.INTENT) {
            _set(nluData, 'intent.name', _get(dialogflowRequest, 'queryResult.intent.displayName'));
        }
        dialogflowAgent.$nlu = nluData;
    }
    inputs(dialogflowAgent) {
        const dialogflowRequest = dialogflowAgent.$request;
        dialogflowAgent.$inputs = dialogflowRequest.getInputs();
    }
    session(dialogflowAgent) {
        const dialogflowRequest = dialogflowAgent.$request;
        const sessionId = _get(dialogflowRequest, 'session');
        if (_get(dialogflowRequest, 'queryResult.outputContexts')) {
            const sessionContext = _get(dialogflowRequest, 'queryResult.outputContexts').find((context) => {
                return context.name === `${sessionId}/contexts/${this.config.sessionContextId}`;
            });
            if (sessionContext) {
                dialogflowAgent.$session.$data = sessionContext.parameters;
                for (const parameter of Object.keys(_get(dialogflowRequest, 'queryResult.parameters'))) {
                    delete dialogflowAgent.$session.$data[parameter];
                    delete dialogflowAgent.$session.$data[parameter + '.original'];
                }
            }
            dialogflowAgent.$requestSessionAttributes = JSON.parse(JSON.stringify(dialogflowAgent.$session.$data));
        }
    }
    output(dialogflowAgent) {
        const output = dialogflowAgent.$output;
        if (!dialogflowAgent.$response) {
            dialogflowAgent.$response = new DialogflowResponse_1.DialogflowResponse();
        }
        if (output.tell) {
            _set(dialogflowAgent.$response, 'fulfillmentText', `${output.tell.speech}`);
        }
        if (output.ask) {
            _set(dialogflowAgent.$response, 'fulfillmentText', `${output.ask.speech}`);
        }
        const dialogflowRequest = dialogflowAgent.$request;
        const sessionId = _get(dialogflowRequest, 'session');
        const outputContexts = _get(dialogflowRequest, 'queryResult.outputContexts', []);
        const contextName = `${sessionId}/contexts/${this.config.sessionContextId}`;
        if (Object.keys(dialogflowAgent.$session.$data).length > 0) {
            const sessionContext = outputContexts.find((context) => {
                return context.name === contextName;
            });
            if (sessionContext) {
                outputContexts.forEach((context) => {
                    if (context.name === contextName) {
                        context.parameters = dialogflowAgent.$session.$data;
                    }
                });
            }
            else {
                outputContexts.push({
                    name: contextName,
                    lifespanCount: 1000,
                    parameters: dialogflowAgent.$session.$data
                });
            }
        }
        _set(dialogflowAgent.$response, 'outputContexts', outputContexts);
    }
}
exports.DialogflowCore = DialogflowCore;
//# sourceMappingURL=DialogflowCore.js.map