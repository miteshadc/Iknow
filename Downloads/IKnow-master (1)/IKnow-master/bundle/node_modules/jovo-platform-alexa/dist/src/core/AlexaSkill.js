"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_core_1 = require("jovo-core");
const _get = require("lodash.get");
const _set = require("lodash.set");
const AlexaResponse_1 = require("./AlexaResponse");
const AlexaAPI_1 = require("../services/AlexaAPI");
const AmazonProfileAPI_1 = require("../services/AmazonProfileAPI");
const AlexaSpeechBuilder_1 = require("./AlexaSpeechBuilder");
const __1 = require("..");
class AlexaSkill extends jovo_core_1.Jovo {
    constructor(app, host) {
        super(app, host);
        this.$alexaSkill = this;
        this.$response = new AlexaResponse_1.AlexaResponse();
        this.$speech = new AlexaSpeechBuilder_1.AlexaSpeechBuilder(this);
        this.$reprompt = new AlexaSpeechBuilder_1.AlexaSpeechBuilder(this);
    }
    /**
     * Returns Speechbuilder object initialized for the platform
     * @public
     * @return {SpeechBuilder}
     */
    speechBuilder() {
        return this.getSpeechBuilder();
    }
    /**
     * Returns Speechbuilder object initialized for the platform
     * @public
     * @return {SpeechBuilder}
     */
    getSpeechBuilder() {
        return new AlexaSpeechBuilder_1.AlexaSpeechBuilder(this);
    }
    /**
     * Returns boolean if request is part of new session
     * @public
     * @return {boolean}
     */
    isNewSession() {
        return this.$request.isNewSession();
    }
    /**
     * Returns timestamp of a user's request
     * @returns {string | undefined}
     */
    getTimestamp() {
        return this.$request.getTimestamp();
    }
    /**
     * Returns locale of the request
     * @deprecated use this.$request.getLocale() instead
     * @returns {string}
     */
    getLocale() {
        return this.$request.getLocale();
    }
    /**
     * Returns UserID
     * @deprecated Use this.$user.getId() instead.
     * @public
     * @return {string}
     */
    getUserId() {
        return _get(this.$request, 'session.user.userId') || _get(this.$request, 'context.user.userId');
    }
    /**
     * Sends an asynchronous speak directive
     * @param {string | SpeechBuilder} speech
     * @param {Function} callback
     * @return {Promise}
     */
    progressiveResponse(speech, callback) {
        const alexaRequest = this.$request;
        if (callback) {
            AlexaAPI_1.AlexaAPI.progressiveResponse(speech, alexaRequest.getRequestId(), alexaRequest.getApiEndpoint(), alexaRequest.getApiAccessToken()).then(() => callback());
        }
        else {
            return AlexaAPI_1.AlexaAPI.progressiveResponse(speech, alexaRequest.getRequestId(), alexaRequest.getApiEndpoint(), alexaRequest.getApiAccessToken());
        }
    }
    /**
     * Makes a request to the amazon profile api
     * @public
     * @param {func} callback
     */
    requestAmazonProfile(callback) {
        const alexaRequest = this.$request;
        if (callback) {
            AmazonProfileAPI_1.AmazonProfileAPI.requestAmazonProfile(alexaRequest.getAccessToken()).then(() => callback());
        }
        else {
            return AmazonProfileAPI_1.AmazonProfileAPI.requestAmazonProfile(alexaRequest.getAccessToken());
        }
    }
    /**
     * Returns device id
     * @returns {string | undefined}
     */
    getDeviceId() {
        return _get(this.$request, 'context.System.device.deviceId');
    }
    /**
     * Returns audio capability of request device
     * @public
     * @return {boolean}
     */
    hasAudioInterface() {
        return this.$request.hasAudioInterface();
    }
    /**
     * Returns screen capability of request device
     * @public
     * @return {boolean}
     */
    hasScreenInterface() {
        return this.$request.hasScreenInterface();
    }
    /**
     * Returns screen capability of request device
     * @public
     * @return {boolean}
     */
    hasVideoInterface() {
        return this.$request.hasVideoInterface();
    }
    /**
     * Returns APL capability of request device
     * @public
     * @return {boolean}
     */
    hasAPLInterface() {
        return this.$request.hasAPLInterface();
    }
    /**
     * Returns geo location capability of request device
     * @public
     * @return {boolean}
     */
    hasGeoLocationInterface() {
        return this.$request.hasGeoLocationInterface();
    }
    /**
     * Returns type of platform jovo implementation
     * @public
     * @return {string}
     */
    getType() {
        return 'AlexaSkill';
    }
    /**
     * Returns type of platform type
     * @public
     * @return {string}
     */
    getPlatformType() {
        return 'Alexa';
    }
    /**
     * Adds raw json directive to output object
     * @param directive
     */
    addDirective(directive) {
        const directives = _get(this.$output, 'Alexa.Directives', []);
        directives.push(directive);
        _set(this.$output, 'Alexa.Directives', directives);
    }
    /**
     * Returns id of the touched/selected item
     * @public
     * @return {*}
     */
    getSelectedElementId() {
        return _get(this.$request, 'request.token');
    }
    /**
     * Returns raw text.
     * Only available with catchAll slots
     * @return {String} rawText
     */
    getRawText() {
        if (!this.$inputs || this.$inputs.catchAll) {
            throw new Error('Only available with catchAll slot');
        }
        return _get(this, '$inputs.catchAll.value');
    }
    /**
     * Returns template builder by type
     * @public
     * @param {string} type
     * @return {*}
     */
    templateBuilder(type) {
        if (type === 'BodyTemplate1') {
            return new __1.BodyTemplate1();
        }
        if (type === 'BodyTemplate2') {
            return new __1.BodyTemplate2();
        }
        if (type === 'BodyTemplate3') {
            return new __1.BodyTemplate3();
        }
        if (type === 'BodyTemplate6') {
            return new __1.BodyTemplate6();
        }
        if (type === 'BodyTemplate7') {
            return new __1.BodyTemplate7();
        }
        if (type === 'ListTemplate1') {
            return new __1.ListTemplate1();
        }
        if (type === 'ListTemplate2') {
            return new __1.ListTemplate2();
        }
        if (type === 'ListTemplate3') {
            return new __1.ListTemplate3();
        }
    }
    /**
     * Returns reason code for an end of a session
     *
     * @public
     * @return {*}
     */
    getEndReason() {
        return _get(this.$request, 'request.reason');
    }
}
exports.AlexaSkill = AlexaSkill;
//# sourceMappingURL=AlexaSkill.js.map