import { JovoResponse, SessionData } from "jovo-core";
export interface SessionAttributes {
    [key: string]: any;
}
export interface Response {
    shouldEndSession?: boolean;
}
export interface AlexaResponseJSON {
    version: string;
    response: Response;
    sessionAttributes?: SessionAttributes;
}
/**
 * Thanks to @see http://choly.ca/post/typescript-json/
 */
export declare class AlexaResponse implements JovoResponse {
    version: string;
    response: Response;
    sessionAttributes?: SessionAttributes;
    constructor();
    getSessionData(path?: string): any;
    hasSessionData(name: string, value?: any): boolean;
    setSessionData(sessionData: SessionData): this;
    getSessionAttributes(): this["sessionAttributes"];
    setSessionAttributes(sessionData: SessionData): this;
    getSpeech(): string | undefined;
    getReprompt(): string | undefined;
    getSpeechPlain(): string | undefined;
    getRepromptPlain(): string | undefined;
    getSessionAttribute(name: string): any;
    /**
     *
     * @param {string} name
     * @param {any} value
     * @return {boolean}
     */
    hasSessionAttribute(name: string, value?: any): boolean;
    hasState(state: string): boolean;
    hasSessionEnded(): any;
    /**
     * Checks if response is a tell request
     * @param {string| string[]} speechText
     * @return {boolean}
     */
    isTell(speechText?: string | string[]): boolean;
    isAsk(speechText?: string | string[], repromptText?: string | string[]): boolean;
    toJSON(): AlexaResponseJSON;
    static fromJSON(json: AlexaResponseJSON | string): any;
    static reviver(key: string, value: any): any;
}
