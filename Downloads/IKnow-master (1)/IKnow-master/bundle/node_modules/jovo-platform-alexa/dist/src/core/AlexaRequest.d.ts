import { Input, JovoRequest, SessionData, Inputs } from "jovo-core";
export interface SessionAttributes {
    [key: string]: any;
}
export interface Session {
    new: boolean;
    sessionId: string;
    application: Application;
    attributes: SessionAttributes;
    user: User;
}
export interface Context {
    System: System;
    AudioPlayer: {
        token: string;
        offsetInMilliseconds: number;
        playerActivity: string;
    };
}
export interface System {
    application: Application;
    user: User;
    device: Device;
    apiEndpoint: string;
    apiAccessToken?: string;
}
export interface Device {
    deviceId: string;
}
export interface User {
    userId: string;
    accessToken: string;
    permissions: Permission;
}
export interface Permission {
    consentToken: string;
}
export interface Application {
    applicationId: string;
}
export declare enum ConfirmationStatus {
    NONE = "NONE",
    CONFIRMED = "CONFIRMED",
    DENIED = "DENIED"
}
export interface Slot {
    name: string;
    confirmationStatus: string;
    value: string;
    source?: string;
}
export interface Intent {
    name: string;
    confirmationStatus: ConfirmationStatus;
    slots?: {
        [key: string]: Slot;
    };
}
export interface Request {
    type: string;
    requestId: string;
    timestamp: string;
    locale: string;
    token?: string;
    offsetInMilliseconds?: number;
    intent?: Intent;
    status?: {
        code: string;
        message: string;
    };
    name?: string;
    payload?: {
        purchaseResult?: string;
        productId?: string;
    };
    error?: {
        type: string;
        message: string;
    };
    cause?: {
        requestId: string;
    };
    originatingRequestId?: string;
    events: any[];
    reason?: string;
    eventCreationTime?: string;
    eventPublishingTime?: string;
    dialogState?: string;
}
export interface AlexaInput extends Input {
    alexaSkill: {
        name?: string;
        value?: string;
        confirmationStatus?: string;
        source?: string;
    };
}
/**
 * Base class of a request from alexa
 */
export interface AlexaRequestJSON {
    version?: string;
    context?: Context;
    session?: Session;
    request?: Request;
    resolutions?: any;
}
/**
 * Thanks to @see http://choly.ca/post/typescript-json/
 */
export declare class AlexaRequest implements JovoRequest {
    version?: string;
    context?: Context;
    session?: Session;
    request?: Request;
    getAccessToken(): any;
    getInputs(): Inputs;
    setInputs(inputs: Inputs): this;
    getLocale(): any;
    getSessionData(): any;
    getState(): any;
    setSessionData(sessionData: SessionData): this;
    addSessionData(key: string, value: any): this;
    getSessionAttributes(): any;
    getTimestamp(): any;
    getUserId(): any;
    /**
     * Returns audio capability of request device
     * @return {boolean}
     */
    hasAudioInterface(): boolean;
    /**
     * Returns screen capability of request device
     * @return {boolean}
     */
    hasScreenInterface(): boolean;
    /**
     * Returns video capability of request device
     * @return {boolean}
     */
    hasVideoInterface(): boolean;
    isNewSession(): any;
    setLocale(locale: string): this;
    setScreenInterface(): this;
    setVideoInterface(): this;
    setSessionAttributes(attributes: SessionData): this;
    addSessionAttribute(key: string, value: any): this;
    setUserId(userId: string): this;
    setAccessToken(accessToken: string): this;
    setNewSession(isNew: boolean): this;
    setTimestamp(timestamp: string): this;
    setAudioInterface(): this;
    setState(state: string): this;
    addInput(key: string, value: string | object): this;
    toJSON(): AlexaRequestJSON;
    /**
     * Returns api endpoint based on user's locale settings
     * @return {String} endpoint url
     */
    getApiEndpoint(): any;
    /**
     * Returns api access token
     * @return {String} endpoint url
     */
    getApiAccessToken(): any;
    /**
     * Returns consent token
     * @return {string} constent token
     */
    getConsentToken(): any;
    /**
     * Returns device id
     * @return {string} device id
     */
    getDeviceId(): any;
    /**
     * Returns audio player token
     * @return {string}
     */
    getAudioPlayerToken(): any;
    getRequestId(): any;
    /**
     * Returns supported interfaces from device.
     * @public
     * @return {string} supportedInterfaces
     */
    getSupportedInterfaces(): any;
    /**
     * Returns audio capability of request device
     * @return {boolean}
     */
    hasAudioPlayerInterface(): boolean;
    /**
     * Returns display capability of request device
     * @return {boolean}
     */
    hasDisplayInterface(): boolean;
    hasAPLInterface(): boolean;
    hasGeoLocationInterface(): boolean;
    getIntentName(): any;
    getSlots(): any;
    getSlot(name: string): Slot;
    setSlots(slots: any): this;
    setSlot(name: string, value: string): this;
    setIntentName(intentName: string): this;
    static fromJSON(json: AlexaRequestJSON | string): AlexaRequest;
    static reviver(key: string, value: any): any;
}
