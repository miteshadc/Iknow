"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_core_1 = require("jovo-core");
const _merge = require("lodash.merge");
const _get = require("lodash.get");
const _set = require("lodash.set");
class JovoUser {
    constructor(config) {
        this.config = {
            columnName: 'userData',
            implicitSave: true,
            metaData: {
                enabled: false,
                lastUsedAt: true,
                sessionsCount: true,
                createdAt: true,
                requestHistorySize: 4,
                devices: true,
            },
            context: {
                enabled: false,
                prev: {
                    size: 1,
                    request: {
                        intent: true,
                        state: true,
                        inputs: true,
                        timestamp: true,
                    },
                    response: {
                        speech: true,
                        reprompt: true,
                        state: true,
                        output: true,
                    },
                },
            },
        };
        this.loadDb = async (handleRequest, force = false) => {
            // no database
            if (!handleRequest.app.$db) {
                return Promise.resolve();
            }
            if (handleRequest.app.$db.needsWriteFileAccess === true && handleRequest.host.hasWriteFileAccess === false) {
                return Promise.resolve();
            }
            if (this.config.implicitSave === false && force === false) {
                return Promise.resolve();
            }
            if (!handleRequest.jovo) {
                throw new Error('Jovo object is not initialized.');
            }
            if (!handleRequest.jovo.$user) {
                throw new Error('User object is not initialized');
            }
            const userId = handleRequest.jovo.$user.getId();
            if (typeof userId === 'undefined') {
                throw new Error(`Can't load user with undefined userId`);
            }
            const data = await handleRequest.app.$db.load(userId);
            jovo_core_1.Log.verbose(jovo_core_1.Log.header('Jovo user (load)', 'framework'));
            jovo_core_1.Log.yellow().verbose(`this.$user.getId(): ${userId}`);
            if (!data) {
                Object.assign(handleRequest.jovo.$user, {
                    $context: {},
                    $data: {},
                    $metaData: {},
                    isDeleted: false,
                });
            }
            else {
                handleRequest.jovo.$user.new = false;
                _set(handleRequest.jovo.$user, '$data', _get(data, `${this.config.columnName}.data`, {}));
                _set(handleRequest.jovo.$user, '$metaData', _get(data, `${this.config.columnName}.metaData`, {}));
                _set(handleRequest.jovo.$user, '$context', _get(data, `${this.config.columnName}.context`, {}));
            }
            jovo_core_1.Log.yellow().verbose(`this.$user.new = ${handleRequest.jovo.$user.new}`);
            jovo_core_1.Log.verbose();
            jovo_core_1.Log.yellow().debug(JSON.stringify(handleRequest.jovo.$user.$context, null, '\t'));
            jovo_core_1.Log.yellow().debug('this.$user.$data');
            jovo_core_1.Log.yellow().debug(JSON.stringify(handleRequest.jovo.$user.$data, null, '\t'));
            jovo_core_1.Log.yellow().debug('this.$user.$metaData');
            jovo_core_1.Log.yellow().debug(JSON.stringify(handleRequest.jovo.$user.$metaData, null, '\t'));
        };
        this.saveDb = async (handleRequest, force = false) => {
            // no database
            if (!handleRequest.app.$db) {
                return Promise.resolve();
            }
            if (handleRequest.app.$db.needsWriteFileAccess === true && handleRequest.host.hasWriteFileAccess === false) {
                return Promise.resolve();
            }
            if (!handleRequest.jovo) {
                throw new Error('Jovo object is not initialized.');
            }
            if (!handleRequest.jovo.$user) {
                throw new Error('User object is not initialized');
            }
            if (handleRequest.jovo.$user.isDeleted) {
                return Promise.resolve();
            }
            if (this.config.implicitSave === false && force === false) {
                return Promise.resolve();
            }
            const userData = {
                data: _get(handleRequest.jovo.$user, '$data')
            };
            if (this.config.context &&
                this.config.context.enabled) {
                this.updateContextData(handleRequest);
                userData.context = _get(handleRequest.jovo.$user, '$context');
            }
            if (this.config.metaData &&
                this.config.metaData.enabled) {
                this.updateMetaData(handleRequest);
                userData.metaData = _get(handleRequest.jovo.$user, '$metaData');
            }
            const userId = handleRequest.jovo.$user.getId();
            if (typeof userId === 'undefined') {
                throw new Error(`Can't save user with undefined userId`);
            }
            await handleRequest.app.$db.save(userId, this.config.columnName || 'userData', userData);
            jovo_core_1.Log.verbose(jovo_core_1.Log.header('Jovo user: (save) ', 'framework'));
            jovo_core_1.Log.yellow().verbose(` Saved user: ${userId}`);
            jovo_core_1.Log.yellow().debug(' this.$user.$context');
            jovo_core_1.Log.yellow().debug(JSON.stringify(handleRequest.jovo.$user.$context, null, '\t'));
            jovo_core_1.Log.yellow().debug(' this.$user.$data');
            jovo_core_1.Log.yellow().debug(JSON.stringify(handleRequest.jovo.$user.$data, null, '\t'));
            jovo_core_1.Log.yellow().debug(' this.$user.$metaData');
            jovo_core_1.Log.yellow().debug(JSON.stringify(handleRequest.jovo.$user.$metaData, null, '\t'));
        };
        if (config) {
            this.config = _merge(this.config, config);
        }
        this.loadDb = this.loadDb.bind(this);
        this.saveDb = this.saveDb.bind(this);
    }
    install(app) {
        app.middleware('user.load').use(this.loadDb);
        app.middleware('user.save').use(this.saveDb);
        const loadDb = this.loadDb;
        const saveDb = this.saveDb;
        jovo_core_1.User.prototype.$context = {};
        jovo_core_1.User.prototype.$data = {};
        jovo_core_1.User.prototype.$metaData = {};
        /**
         * Return the intent at the specified index
         * @deprecated use this.$user.context.prev[index].request.intent instead
         * @param {number} index
         * @return {String}
         */
        jovo_core_1.User.prototype.getPrevIntent = function (index) {
            return _get(this.$context, `prev[${index}].request.intent`);
        };
        /**
         * Returns request.state at the specified index
         * @deprecated use this.$user.context.prev[index].request.state instead
         * @param {number} index
         * @return {String}
         */
        jovo_core_1.User.prototype.getPrevRequestState = function (index) {
            return _get(this.$context, `prev[${index}].request.state`);
        };
        /**
         * Returns response.state at the specified index
         * @deprecated use this.$user.context.prev[index].response.state instead
         * @param {number} index
         * @return {String}
         */
        jovo_core_1.User.prototype.getPrevResponseState = function (index) {
            return _get(this.$context, `prev[${index}].response.state`);
        };
        /**
         * Returns the inputs at the specified index
         * @deprecated use this.$user.context.prev[index].request.inputs instead
         * @param {number} index
         * @return {*}
         */
        jovo_core_1.User.prototype.getPrevInputs = function (index) {
            return _get(this.$context, `prev[${index}].request.inputs`);
        };
        /**
         * Returns the timestamp at the specified index
         * @deprecated use this.$user.context.prev[index].request.timestamp instead
         * @param {number} index
         * @return {String|*}
         */
        jovo_core_1.User.prototype.getPrevTimestamp = function (index) {
            return _get(this.$context, `prev[${index}].request.timestamp`);
        };
        /**
         * Returns the speech at the specified index
         * @deprecated use this.$user.context.prev[index].response.speech instead
         * @param {number} index
         * @return {String}
         */
        jovo_core_1.User.prototype.getPrevSpeech = function (index) {
            return _get(this.$context, `prev[${index}].response.speech`);
        };
        /**
         * Returns the reprompt at the specified index
         * @deprecated use this.$user.context.prev[index].request.reprompt instead
         * @param {number} index
         * @return {String}
         */
        jovo_core_1.User.prototype.getPrevReprompt = function (index) {
            return _get(this.$context, `prev[${index}].response.reprompt`);
        };
        /**
         * Explicit user deletion
         * @returns {Promise<void>}
         */
        jovo_core_1.User.prototype.delete = async function () {
            const userId = this.getId();
            if (typeof userId === 'undefined') {
                throw new Error(`Can't delete user with undefined userId`);
            }
            if (this.jovo.$app.$db) {
                await this.jovo.$app.$db.delete(userId);
                this.isDeleted = true;
                jovo_core_1.Log.verbose(`User with id ${userId} has been deleted.`);
            }
            else {
                throw new Error('No database configurated.');
            }
        };
        /**
         * Load user from db
         * @returns {Promise<any>}
         */
        jovo_core_1.User.prototype.loadData = async function () {
            if (!this.jovo) {
                throw new Error('Jovo object is not initialized.');
            }
            return await loadDb({
                jovo: this.jovo,
                host: this.jovo.$host,
                app: this.jovo.$app
            }, true);
        };
        /**
         * Save user to db
         * @returns {Promise<any>}
         */
        jovo_core_1.User.prototype.saveData = async function () {
            if (!this.jovo) {
                throw new Error('Jovo object is not initialized.');
            }
            return await saveDb({
                jovo: this.jovo,
                host: this.jovo.$host,
                app: this.jovo.$app
            }, true);
        };
        /**
         * Repeats last speech & reprompt
         * Gets the info from the database.
         *
         * Context saving has to be set.
         * user: {
         *      context: true
         * }
         */
        jovo_core_1.Jovo.prototype.repeat = async function () {
            if (_get(this.$user, '$context.prev[0].response.output')) {
                this.setOutput(_get(this.$user, '$context.prev[0].response.output'));
            }
        };
    }
    updateMetaData(handleRequest) {
        if (!handleRequest.jovo) {
            throw new Error('Jovo object is not initialized.');
        }
        if (!handleRequest.jovo.$user) {
            throw new Error('User object is not initialized');
        }
        if (_get(this.config, 'metaData.createdAt')) {
            if (!_get(handleRequest.jovo.$user, '$metaData.createdAt')) {
                _set(handleRequest.jovo.$user, '$metaData.createdAt', new Date().toISOString());
            }
        }
        if (_get(this.config, 'metaData.lastUsedAt')) {
            _set(handleRequest.jovo.$user, '$metaData.lastUsedAt', new Date().toISOString());
        }
        if (_get(this.config, 'metaData.sessionsCount')) {
            let sessionsCount = _get(handleRequest.jovo.$user, '$metaData.sessionsCount') || 0;
            if (handleRequest.jovo.isNewSession()) {
                sessionsCount += 1;
            }
            _set(handleRequest.jovo.$user, '$metaData.sessionsCount', sessionsCount);
        }
        if (_get(this.config, 'metaData.requestHistorySize') > 0) {
            if (!handleRequest.jovo.$user.$metaData.requests) {
                handleRequest.jovo.$user.$metaData.requests = {};
            }
            if (!handleRequest.jovo.$user.$metaData.requests[handleRequest.jovo.getHandlerPath()]) {
                handleRequest.jovo.$user.$metaData.requests[handleRequest.jovo.getHandlerPath()] = {
                    count: 0,
                    log: [],
                };
            }
            // const requestItem = _get(handleRequest.jovo.$user,`metaData.requests.${handleRequest.jovo.getHandlerPath()}`);
            const requestItem = handleRequest.jovo.$user.$metaData.requests[handleRequest.jovo.getHandlerPath()];
            requestItem.count += 1;
            requestItem.log.push(new Date().toISOString());
            if (requestItem.log.length > _get(this.config, 'metaData.requestHistorySize')) {
                requestItem.log = requestItem.log.slice(1, requestItem.log.length);
            }
        }
        if (_get(this.config, 'metaData.devices')) {
            if (!_get(handleRequest.jovo.$user, '$metadata.devices["' + handleRequest.jovo.getDeviceId() + '"]')) {
                const device = {
                    hasAudioInterface: handleRequest.jovo.hasAudioInterface(),
                    hasScreenInterface: handleRequest.jovo.hasScreenInterface(),
                    hasVideoInterface: handleRequest.jovo.hasVideoInterface(),
                };
                _set(handleRequest.jovo.$user, '$metaData.devices["' + handleRequest.jovo.getDeviceId() + '"]', device);
            }
        }
    }
    updateContextData(handleRequest) {
        if (!handleRequest.jovo) {
            throw new Error('Jovo object is not initialized.');
        }
        if (!handleRequest.jovo.$user) {
            throw new Error('User object is not initialized');
        }
        if (_get(this.config, 'context.prev.size') < 1) {
            return;
        }
        if (!_get(handleRequest.jovo.$user, '$context.prev')) {
            _set(handleRequest.jovo.$user, '$context.prev', []);
        }
        if (_get(this.config, 'metaData.createdAt')) {
            if (!_get(handleRequest.jovo.$user, '$metaData.createdAt')) {
                _set(handleRequest.jovo.$user, '$metaData.createdAt', new Date().toISOString());
            }
        }
        const prevObject = {};
        if (_get(this.config, 'context.prev.response.speech')) {
            if (handleRequest.jovo.$output.tell) {
                _set(prevObject, 'response.speech', handleRequest.jovo.$output.tell.speech);
            }
            if (handleRequest.jovo.$output.ask) {
                _set(prevObject, 'response.speech', handleRequest.jovo.$output.ask.speech);
            }
        }
        if (_get(this.config, 'context.prev.response.reprompt')) {
            if (handleRequest.jovo.$output.ask) {
                _set(prevObject, 'response.reprompt', handleRequest.jovo.$output.ask.reprompt);
            }
        }
        if (_get(this.config, 'context.prev.response.state')) {
            // prevObject.response.state = handleRequest.jovo.getState();
            if (handleRequest.jovo.$session &&
                handleRequest.jovo.$session.$data &&
                handleRequest.jovo.$session.$data[jovo_core_1.SessionConstants.STATE]) {
                _set(prevObject, 'response.state', handleRequest.jovo.$session.$data[jovo_core_1.SessionConstants.STATE]);
            }
        }
        if (_get(this.config, 'context.prev.request.timestamp')) {
            _set(prevObject, 'request.timestamp', handleRequest.jovo.$request.getTimestamp());
        }
        if (_get(this.config, 'context.prev.request.state')) {
            if (_get(handleRequest.jovo.$requestSessionAttributes, jovo_core_1.SessionConstants.STATE)) {
                _set(prevObject, 'request.state', handleRequest.jovo.$requestSessionAttributes[jovo_core_1.SessionConstants.STATE]);
            }
        }
        if (_get(this.config, 'context.prev.request.inputs')) {
            if (handleRequest.jovo.$inputs) {
                _set(prevObject, 'request.inputs', handleRequest.jovo.$inputs);
            }
        }
        if (_get(this.config, 'context.prev.request.intent')) {
            if (handleRequest.jovo.$type.type === jovo_core_1.EnumRequestType.INTENT) {
                _set(prevObject, 'request.intent', handleRequest.jovo.$plugins.Router.route.intent);
            }
            else {
                _set(prevObject, 'request.intent', handleRequest.jovo.$plugins.Router.route.path);
            }
        }
        if (_get(this.config, 'context.prev.response.output')) {
            if (handleRequest.jovo.$output) {
                _set(prevObject, 'response.output', handleRequest.jovo.$output);
            }
        }
        if (_get(prevObject, 'request') || _get(prevObject, 'response')) {
            if (handleRequest.jovo.$user.$context.prev) {
                // Prevents storing empty object
                handleRequest.jovo.$user.$context.prev.unshift(prevObject);
                handleRequest.jovo.$user.$context.prev = handleRequest.jovo.$user.$context.prev.slice(0, _get(this.config, 'context.prev.size')); // add new prevObject to the beginning
            }
        }
    }
    uninstall(app) {
    }
}
exports.JovoUser = JovoUser;
//# sourceMappingURL=JovoUser.js.map