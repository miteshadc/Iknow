"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logging_helper_1 = require("../core/logging-helper");
const module_manager_1 = require("./module-manager");
const bodyParser = require("body-parser");
const express = require("express");
let Logger = "BST-FUNCTION";
class FunctionServer {
    constructor(file, functionName, port, verbose) {
        this.file = file;
        this.functionName = functionName;
        this.port = port;
        this.verbose = verbose;
        this.requests = [];
        this.server = null;
    }
    start(callback) {
        let self = this;
        this.moduleManager = new module_manager_1.ModuleManager(process.cwd());
        this.moduleManager.start();
        const app = express();
        app.use(bodyParser.json());
        app.use((request, response) => {
            self.requests.push(request);
            self.invoke(request, response);
        });
        this.server = app.listen(this.port, function () {
            logging_helper_1.LoggingHelper.info(Logger, "CloudFunctionServer started on port: " + self.port);
            if (callback !== undefined && callback !== null) {
                callback();
            }
        });
    }
    stop(onStop) {
        this.moduleManager.stop();
        let request = null;
        for (request of this.requests) {
            try {
                request.socket.end();
            }
            catch (e) {
            }
        }
        this.server.close(function () {
            if (onStop !== undefined && onStop !== null) {
                onStop();
            }
        });
    }
    invoke(request, response) {
        let path = this.file;
        logging_helper_1.LoggingHelper.debug(Logger, "Invoking Function: " + this.file);
        const cloudFunction = this.moduleManager.module(path);
        if (!(this.functionName in cloudFunction)) {
            const message = "Function: " + this.functionName
                + " does not exist or has not been exported from module: " + this.file;
            logging_helper_1.LoggingHelper.error(Logger, message);
            response.status(500).send(message);
            return;
        }
        try {
            cloudFunction[this.functionName].call(cloudFunction, request, response);
        }
        catch (e) {
            if (e.stack) {
                console.error(e.stack);
            }
            else {
                console.error(e);
            }
            const message = "Unhandled Exception from Cloud Function: " + e;
            response.status(500).send(message);
        }
    }
}
exports.FunctionServer = FunctionServer;
//# sourceMappingURL=function-server.js.map