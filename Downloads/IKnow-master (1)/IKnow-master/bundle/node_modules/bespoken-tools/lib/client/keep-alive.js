"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const socket_handler_1 = require("../core/socket-handler");
const global_1 = require("../core/global");
const KeepAlivePeriod = 30000;
const KeepAliveWindowPeriod = 300000;
const KeepAliveWarningThreshold = 5;
class KeepAlive {
    constructor(socket) {
        this.socket = socket;
        this.pingPeriod = KeepAlivePeriod;
        this.windowPeriod = KeepAliveWindowPeriod;
        this.warningThreshold = KeepAliveWarningThreshold;
        this.keepAliveArray = [];
        this.timeout = null;
        this.stopped = false;
    }
    start(onFailureCallback) {
        this.onFailureCallback = onFailureCallback;
        this.reset();
        this.keepAlive();
    }
    reset() {
        this.startedTimestamp = new Date().getTime();
    }
    keepAlive() {
        let self = this;
        if ((new Date().getTime() - this.startedTimestamp) > this.windowPeriod) {
            this.keepAliveArray = this.keepAlivesInPeriod(this.windowPeriod);
            if (this.keepAliveArray.length <= this.warningThreshold) {
                this.onFailureCallback();
                this.reset();
            }
        }
        this.timeout = setTimeout(function () {
            if (!self.stopped) {
                self.socket.send(new socket_handler_1.SocketMessage(global_1.Global.KeepAliveMessage));
                self.keepAlive();
            }
        }, this.pingPeriod);
    }
    keepAlivesInPeriod(periodInMilliseconds) {
        let newArray = [];
        let rightNow = new Date().getTime();
        for (let timestamp of this.keepAliveArray) {
            let secondsPassed = rightNow - timestamp;
            if (secondsPassed < periodInMilliseconds) {
                newArray.push(timestamp);
            }
        }
        return newArray;
    }
    received() {
        this.keepAliveArray.push(new Date().getTime());
    }
    stop() {
        if (this.timeout !== null) {
            this.stopped = true;
            clearTimeout(this.timeout);
        }
    }
}
exports.KeepAlive = KeepAlive;
//# sourceMappingURL=keep-alive.js.map