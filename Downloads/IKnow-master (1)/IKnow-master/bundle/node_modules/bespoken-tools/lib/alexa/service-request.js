"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const audio_player_1 = require("./audio-player");
const uuid = require("uuid");
class RequestType {
}
RequestType.IntentRequest = "IntentRequest";
RequestType.LaunchRequest = "LaunchRequest";
RequestType.SessionEndedRequest = "SessionEndedRequest";
RequestType.AudioPlayerPlaybackFinished = "AudioPlayer.PlaybackFinished";
RequestType.AudioPlayerPlaybackNearlyFinished = "AudioPlayer.PlaybackNearlyFinished";
RequestType.AudioPlayerPlaybackStarted = "AudioPlayer.PlaybackStarted";
RequestType.AudioPlayerPlaybackStopped = "AudioPlayer.PlaybackStopped";
exports.RequestType = RequestType;
var SessionEndedReason;
(function (SessionEndedReason) {
    SessionEndedReason[SessionEndedReason["ERROR"] = 0] = "ERROR";
    SessionEndedReason[SessionEndedReason["EXCEEDED_MAX_REPROMPTS"] = 1] = "EXCEEDED_MAX_REPROMPTS";
    SessionEndedReason[SessionEndedReason["USER_INITIATED"] = 2] = "USER_INITIATED";
})(SessionEndedReason = exports.SessionEndedReason || (exports.SessionEndedReason = {}));
class ServiceRequest {
    constructor(context) {
        this.context = context;
        this.requestJSON = null;
    }
    intentRequest(intentName) {
        let isBuiltin = intentName.startsWith("AMAZON");
        if (!isBuiltin) {
            if (!this.context.interactionModel().hasIntent(intentName)) {
                throw new Error("Interaction model has no intentName named: " + intentName);
            }
        }
        this.requestJSON = this.baseRequest(RequestType.IntentRequest);
        this.requestJSON.request.intent = {
            name: intentName
        };
        if (!isBuiltin) {
            let intent = this.context.interactionModel().intentSchema.intent(intentName);
            if (intent.slots !== null && intent.slots.length > 0) {
                this.requestJSON.request.intent.slots = {};
                for (let slot of intent.slots) {
                    this.requestJSON.request.intent.slots[slot.name] = {
                        name: slot.name
                    };
                }
            }
        }
        return this;
    }
    audioPlayerRequest(requestType, token, offsetInMilliseconds) {
        this.requestJSON = this.baseRequest(requestType);
        this.requestJSON.request.token = token;
        this.requestJSON.request.offsetInMilliseconds = offsetInMilliseconds;
        return this;
    }
    launchRequest() {
        this.requestJSON = this.baseRequest(RequestType.LaunchRequest);
        return this;
    }
    sessionEndedRequest(reason, errorData) {
        this.requestJSON = this.baseRequest(RequestType.SessionEndedRequest);
        this.requestJSON.request.reason = SessionEndedReason[reason];
        if (errorData !== undefined && errorData !== null) {
            this.requestJSON.request.error = errorData;
        }
        return this;
    }
    withSlot(slotName, slotValue) {
        if (this.requestJSON.request.type !== "IntentRequest") {
            throw Error("Adding slot to non-intentName request - not allowed!");
        }
        this.requestJSON.request.intent.slots[slotName] = { "name": slotName, "value": slotValue };
        return this;
    }
    requiresSession() {
        let requireSession = false;
        if (this.requestType === RequestType.LaunchRequest || this.requestType === RequestType.IntentRequest) {
            requireSession = true;
        }
        return requireSession;
    }
    baseRequest(requestType) {
        this.requestType = requestType;
        const applicationID = this.context.applicationID();
        const requestID = ServiceRequest.requestID();
        const userID = this.context.userID();
        const timestamp = ServiceRequest.timestamp();
        const baseRequest = {
            request: {
                type: requestType,
                locale: "en-US",
                requestId: requestID,
                timestamp: timestamp
            },
            context: {
                System: {
                    application: {
                        applicationId: applicationID
                    },
                    device: {
                        supportedInterfaces: {
                            AudioPlayer: {}
                        }
                    },
                    user: {
                        userId: userID
                    },
                }
            },
            version: "1.0"
        };
        if (this.context.accessToken() !== null) {
            baseRequest.context.System.user["accessToken"] = this.context.accessToken();
        }
        return baseRequest;
    }
    static timestamp() {
        let timestamp = new Date().toISOString();
        return timestamp.substring(0, 19) + "Z";
    }
    static requestID() {
        return "amzn1.echo-api.request." + uuid.v4();
    }
    includeSession() {
        let include = false;
        if (this.requestType === RequestType.IntentRequest ||
            this.requestType === RequestType.LaunchRequest ||
            this.requestType === RequestType.SessionEndedRequest) {
            include = true;
        }
        return include;
    }
    toJSON() {
        const applicationID = this.context.applicationID();
        const userID = this.context.userID();
        if (this.includeSession() && this.context.activeSession()) {
            const session = this.context.session();
            let newSession = session.isNew();
            let sessionID = session.id();
            let attributes = session.attributes();
            this.requestJSON.session = {
                sessionId: sessionID,
                application: {
                    applicationId: applicationID
                },
                user: {
                    userId: userID
                },
                "new": newSession
            };
            if (this.requestType !== RequestType.LaunchRequest) {
                this.requestJSON.session.attributes = attributes;
            }
            if (this.context.accessToken() !== null) {
                this.requestJSON.session.user["accessToken"] = this.context.accessToken();
            }
        }
        if (this.requestType === RequestType.IntentRequest
            || this.requestType === RequestType.LaunchRequest
            || this.requestType === RequestType.SessionEndedRequest) {
            if (this.context.audioPlayerEnabled()) {
                const activity = audio_player_1.AudioPlayerActivity[this.context.audioPlayer().activity()];
                this.requestJSON.context.AudioPlayer = {
                    playerActivity: activity
                };
                if (this.context.audioPlayer().activity() !== audio_player_1.AudioPlayerActivity.IDLE) {
                    const playing = this.context.audioPlayer().playing();
                    this.requestJSON.context.AudioPlayer.token = playing.stream.token;
                    this.requestJSON.context.AudioPlayer.offsetInMilliseconds = playing.stream.offsetInMilliseconds;
                }
            }
        }
        return this.requestJSON;
    }
}
exports.ServiceRequest = ServiceRequest;
//# sourceMappingURL=service-request.js.map